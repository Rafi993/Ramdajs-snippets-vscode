{
  "add": {
    "prefix": "Radd",
    "body": [
      "R.add($Number, $Number)"
    ],
    "description": "\n  Adds two values.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Math\n  @sig Number -> Number -> Number\n  @param {Number} a\n  @param {Number} b\n  @return {Number}\n  @see R.subtract\n  @example\n \n       R.add(2, 3);       //=>  5\n       R.add(7)(10);      //=> 17\n "
  },
  "addIndex": {
    "prefix": "RaddIndex",
    "body": [
      "R.addIndex($Function)"
    ],
    "description": "\n  Creates a new list iteration function from an existing one by adding two new\n  parameters to its callback function: the current index, and the entire list.\n \n  This would turn, for instance, [`R.map`](#map) function into one that\n  more closely resembles `Array.prototype.map`. Note that this will only work\n  for functions in which the iteration callback function is the first\n  parameter, and where the list is the last parameter. (This latter might be\n  unimportant if the list parameter is not used.)\n \n  @func\n  @memberOf R\n  @since v0.15.0\n  @category Function\n  @category List\n  @sig ((a ... -> b) ... -> [a] -> ) -> (a ..., Int, [a] -> b) ... -> [a] -> )\n  @param {Function} fn A list iteration function that does not pass index or list to its callback\n  @return {Function} An altered list iteration function that passes (item, index, list) to its callback\n  @example\n \n       var mapIndexed = R.addIndex(R.map);\n       mapIndexed((val, idx) => idx + '-' + val, ['f', 'o', 'o', 'b', 'a', 'r']);\n       //=> ['0-f', '1-o', '2-o', '3-b', '4-a', '5-r']\n "
  },
  "adjust": {
    "prefix": "Radjust",
    "body": [
      "R.adjust($Function, $Number, $Array|Arguments)"
    ],
    "description": "\n  Applies a function to the value at the given index of an array, returning a\n  new copy of the array with the element at the given index replaced with the\n  result of the function application.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category List\n  @sig (a -> a) -> Number -> [a] -> [a]\n  @param {Function} fn The function to apply.\n  @param {Number} idx The index.\n  @param {Array|Arguments} list An array-like object whose value\n         at the supplied index will be replaced.\n  @return {Array} A copy of the supplied array-like object with\n          the element at index `idx` replaced with the value\n          returned by applying `fn` to the existing element.\n  @see R.update\n  @example\n \n       R.adjust(R.add(10), 1, [1, 2, 3]);     //=> [1, 12, 3]\n       R.adjust(R.add(10))(1)([1, 2, 3]);     //=> [1, 12, 3]\n  @symb R.adjust(f, -1, [a, b]) = [a, f(b)]\n  @symb R.adjust(f, 0, [a, b]) = [f(a), b]\n "
  },
  "all": {
    "prefix": "Rall",
    "body": [
      "R.all($Function, $Array)"
    ],
    "description": "\n  Returns `true` if all elements of the list match the predicate, `false` if\n  there are any that don't.\n \n  Dispatches to the `all` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> Boolean\n  @param {Function} fn The predicate function.\n  @param {Array} list The array to consider.\n  @return {Boolean} `true` if the predicate is satisfied by every element, `false`\n          otherwise.\n  @see R.any, R.none, R.transduce\n  @example\n \n       var equals3 = R.equals(3);\n       R.all(equals3)([3, 3, 3, 3]); //=> true\n       R.all(equals3)([3, 3, 1, 3]); //=> false\n "
  },
  "allPass": {
    "prefix": "RallPass",
    "body": [
      "R.allPass($Array)"
    ],
    "description": "\n  Takes a list of predicates and returns a predicate that returns true for a\n  given list of arguments if every one of the provided predicates is satisfied\n  by those arguments.\n \n  The function returned is a curried function whose arity matches that of the\n  highest-arity predicate.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Logic\n  @sig [(... -> Boolean)] -> (... -> Boolean)\n  @param {Array} predicates An array of predicates to check\n  @return {Function} The combined predicate\n  @see R.anyPass\n  @example\n \n       var isQueen = R.propEq('rank', 'Q');\n       var isSpade = R.propEq('suit', '♠︎');\n       var isQueenOfSpades = R.allPass([isQueen, isSpade]);\n \n       isQueenOfSpades({rank: 'Q', suit: '♣︎'}); //=> false\n       isQueenOfSpades({rank: 'Q', suit: '♠︎'}); //=> true\n "
  },
  "always": {
    "prefix": "Ralways",
    "body": [
      "R.always($[any])"
    ],
    "description": "\n  Returns a function that always returns the given value. Note that for\n  non-primitives the value returned is a reference to the original value.\n \n  This function is known as `const`, `constant`, or `K` (for K combinator) in\n  other languages and libraries.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig a -> ( -> a)\n  @param {} val The value to wrap in a function\n  @return {Function} A Function ::  -> val.\n  @example\n \n       var t = R.always('Tee');\n       t(); //=> 'Tee'\n "
  },
  "and": {
    "prefix": "Rand",
    "body": [
      "R.and($Any, $Any)"
    ],
    "description": "\n  Returns `true` if both arguments are `true`; `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Logic\n  @sig a -> b -> a | b\n  @param {Any} a\n  @param {Any} b\n  @return {Any} the first argument if it is falsy, otherwise the second argument.\n  @see R.both\n  @example\n \n       R.and(true, true); //=> true\n       R.and(true, false); //=> false\n       R.and(false, true); //=> false\n       R.and(false, false); //=> false\n "
  },
  "any": {
    "prefix": "Rany",
    "body": [
      "R.any($Function, $Array)"
    ],
    "description": "\n  Returns `true` if at least one of elements of the list match the predicate,\n  `false` otherwise.\n \n  Dispatches to the `any` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> Boolean\n  @param {Function} fn The predicate function.\n  @param {Array} list The array to consider.\n  @return {Boolean} `true` if the predicate is satisfied by at least one element, `false`\n          otherwise.\n  @see R.all, R.none, R.transduce\n  @example\n \n       var lessThan0 = R.flip(R.lt)(0);\n       var lessThan2 = R.flip(R.lt)(2);\n       R.any(lessThan0)([1, 2]); //=> false\n       R.any(lessThan2)([1, 2]); //=> true\n "
  },
  "anyPass": {
    "prefix": "RanyPass",
    "body": [
      "R.anyPass($Array)"
    ],
    "description": "\n  Takes a list of predicates and returns a predicate that returns true for a\n  given list of arguments if at least one of the provided predicates is\n  satisfied by those arguments.\n \n  The function returned is a curried function whose arity matches that of the\n  highest-arity predicate.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Logic\n  @sig [(... -> Boolean)] -> (... -> Boolean)\n  @param {Array} predicates An array of predicates to check\n  @return {Function} The combined predicate\n  @see R.allPass\n  @example\n \n       var isClub = R.propEq('suit', '♣');\n       var isSpade = R.propEq('suit', '♠');\n       var isBlackCard = R.anyPass([isClub, isSpade]);\n \n       isBlackCard({rank: '10', suit: '♣'}); //=> true\n       isBlackCard({rank: 'Q', suit: '♠'}); //=> true\n       isBlackCard({rank: 'Q', suit: '♦'}); //=> false\n "
  },
  "ap": {
    "prefix": "Rap",
    "body": [
      "R.ap($[any], $[any])"
    ],
    "description": "\n  ap applies a list of functions to a list of values.\n \n  Dispatches to the `ap` method of the second argument, if present. Also\n  treats curried functions as applicatives.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category Function\n  @sig [a -> b] -> [a] -> [b]\n  @sig Apply f => f (a -> b) -> f a -> f b\n  @sig (a -> b -> c) -> (a -> b) -> (a -> c)\n  @param {} applyF\n  @param {} applyX\n  @return {}\n  @example\n \n       R.ap([R.multiply(2), R.add(3)], [1,2,3]); //=> [2, 4, 6, 4, 5, 6]\n       R.ap([R.concat('tasty '), R.toUpper], ['pizza', 'salad']); //=> [\"tasty pizza\", \"tasty salad\", \"PIZZA\", \"SALAD\"]\n \n       // R.ap can also be used as S combinator\n       // when only two functions are passed\n       R.ap(R.concat, R.toUpper)('Ramda') //=> 'RamdaRAMDA'\n  @symb R.ap([f, g], [a, b]) = [f(a), f(b), g(a), g(b)]\n "
  },
  "aperture": {
    "prefix": "Raperture",
    "body": [
      "R.aperture($Number, $Array)"
    ],
    "description": "\n  Returns a new list, composed of n-tuples of consecutive elements. If `n` is\n  greater than the length of the list, an empty list is returned.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category List\n  @sig Number -> [a] -> [[a]]\n  @param {Number} n The size of the tuples to create\n  @param {Array} list The list to split into `n`-length tuples\n  @return {Array} The resulting list of `n`-length tuples\n  @see R.transduce\n  @example\n \n       R.aperture(2, [1, 2, 3, 4, 5]); //=> [[1, 2], [2, 3], [3, 4], [4, 5]]\n       R.aperture(3, [1, 2, 3, 4, 5]); //=> [[1, 2, 3], [2, 3, 4], [3, 4, 5]]\n       R.aperture(7, [1, 2, 3, 4, 5]); //=> []\n "
  },
  "append": {
    "prefix": "Rappend",
    "body": [
      "R.append($[any], $Array)"
    ],
    "description": "\n  Returns a new list containing the contents of the given list, followed by\n  the given element.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig a -> [a] -> [a]\n  @param {} el The element to add to the end of the new list.\n  @param {Array} list The list of elements to add a new item to.\n         list.\n  @return {Array} A new list containing the elements of the old list followed by `el`.\n  @see R.prepend\n  @example\n \n       R.append('tests', ['write', 'more']); //=> ['write', 'more', 'tests']\n       R.append('tests', []); //=> ['tests']\n       R.append(['tests'], ['write', 'more']); //=> ['write', 'more', ['tests']]\n "
  },
  "apply": {
    "prefix": "Rapply",
    "body": [
      "R.apply($Function, $Array)"
    ],
    "description": "\n  Applies function `fn` to the argument list `args`. This is useful for\n  creating a fixed-arity function from a variadic function. `fn` should be a\n  bound function if context is significant.\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category Function\n  @sig (... -> a) -> [] -> a\n  @param {Function} fn The function which will be called with `args`\n  @param {Array} args The arguments to call `fn` with\n  @return {} result The result, equivalent to `fn(...args)`\n  @see R.call, R.unapply\n  @example\n \n       var nums = [1, 2, 3, -99, 42, 6, 7];\n       R.apply(Math.max, nums); //=> 42\n  @symb R.apply(f, [a, b, c]) = f(a, b, c)\n "
  },
  "applySpec": {
    "prefix": "RapplySpec",
    "body": [
      "R.applySpec($Object)"
    ],
    "description": "\n  Given a spec object recursively mapping properties to functions, creates a\n  function producing an object of the same structure, by mapping each property\n  to the result of calling its associated function with the supplied arguments.\n \n  @func\n  @memberOf R\n  @since v0.20.0\n  @category Function\n  @sig {k: ((a, b, ..., m) -> v)} -> ((a, b, ..., m) -> {k: v})\n  @param {Object} spec an object recursively mapping properties to functions for\n         producing the values for these properties.\n  @return {Function} A function that returns an object of the same structure\n  as `spec', with each property set to the value returned by calling its\n  associated function with the supplied arguments.\n  @see R.converge, R.juxt\n  @example\n \n       var getMetrics = R.applySpec({\n         sum: R.add,\n         nested: { mul: R.multiply }\n       });\n       getMetrics(2, 4); // => { sum: 6, nested: { mul: 8 } }\n  @symb R.applySpec({ x: f, y: { z: g } })(a, b) = { x: f(a, b), y: { z: g(a, b) } }\n "
  },
  "applyTo": {
    "prefix": "RapplyTo",
    "body": [
      "R.applyTo($[any], $Function)"
    ],
    "description": "\n Takes a value and applies a function to it.\n\n This function is also known as the `thrush` combinator.\n\n @func\n @memberOf R\n  @since v0.25.0\n @category Function\n @sig a -> (a -> b) -> b\n @param {} x The value\n @param {Function} f The function to apply\n @return {} The result of applying `f` to `x`\n @example\n\n      var t42 = R.applyTo(42);\n      t42(R.identity); //=> 42\n      t42(R.add(1)); //=> 43\n"
  },
  "ascend": {
    "prefix": "Rascend",
    "body": [
      "R.ascend($Function, $[any], $[any])"
    ],
    "description": "\n  Makes an ascending comparator function out of a function that returns a value\n  that can be compared with `<` and `>`.\n \n  @func\n  @memberOf R\n  @since v0.23.0\n  @category Function\n  @sig Ord b => (a -> b) -> a -> a -> Number\n  @param {Function} fn A function of arity one that returns a value that can be compared\n  @param {} a The first item to be compared.\n  @param {} b The second item to be compared.\n  @return {Number} `-1` if fn(a) < fn(b), `1` if fn(b) < fn(a), otherwise `0`\n  @see R.descend\n  @example\n \n       var byAge = R.ascend(R.prop('age'));\n       var people = [\n         // ...\n       ];\n       var peopleByYoungestFirst = R.sort(byAge, people);\n "
  },
  "assoc": {
    "prefix": "Rassoc",
    "body": [
      "R.assoc($String, $[any], $Object)"
    ],
    "description": "\n  Makes a shallow clone of an object, setting or overriding the specified\n  property with the given value. Note that this copies and flattens prototype\n  properties onto the new object as well. All non-primitive properties are\n  copied by reference.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Object\n  @sig String -> a -> {k: v} -> {k: v}\n  @param {String} prop The property name to set\n  @param {} val The new value\n  @param {Object} obj The object to clone\n  @return {Object} A new object equivalent to the original except for the changed property.\n  @see R.dissoc\n  @example\n \n       R.assoc('c', 3, {a: 1, b: 2}); //=> {a: 1, b: 2, c: 3}\n "
  },
  "assocPath": {
    "prefix": "RassocPath",
    "body": [
      "R.assocPath($Array, $[any], $Object)"
    ],
    "description": "\n  Makes a shallow clone of an object, setting or overriding the nodes required\n  to create the given path, and placing the specific value at the tail end of\n  that path. Note that this copies and flattens prototype properties onto the\n  new object as well. All non-primitive properties are copied by reference.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Object\n  @typedefn Idx = String | Int\n  @sig [Idx] -> a -> {a} -> {a}\n  @param {Array} path the path to set\n  @param {} val The new value\n  @param {Object} obj The object to clone\n  @return {Object} A new object equivalent to the original except along the specified path.\n  @see R.dissocPath\n  @example\n \n       R.assocPath(['a', 'b', 'c'], 42, {a: {b: {c: 0}}}); //=> {a: {b: {c: 42}}}\n \n       // Any missing or non-object keys in path will be overridden\n       R.assocPath(['a', 'b', 'c'], 42, {a: 5}); //=> {a: {b: {c: 42}}}\n "
  },
  "binary": {
    "prefix": "Rbinary",
    "body": [
      "R.binary($Function)"
    ],
    "description": "\n  Wraps a function of any arity (including nullary) in a function that accepts\n  exactly 2 parameters. Any extraneous parameters will not be passed to the\n  supplied function.\n \n  @func\n  @memberOf R\n  @since v0.2.0\n  @category Function\n  @sig ( -> c) -> (a, b -> c)\n  @param {Function} fn The function to wrap.\n  @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n          arity 2.\n  @see R.nAry, R.unary\n  @example\n \n       var takesThreeArgs = function(a, b, c) {\n         return [a, b, c];\n       };\n       takesThreeArgs.length; //=> 3\n       takesThreeArgs(1, 2, 3); //=> [1, 2, 3]\n \n       var takesTwoArgs = R.binary(takesThreeArgs);\n       takesTwoArgs.length; //=> 2\n       // Only 2 arguments are passed to the wrapped function\n       takesTwoArgs(1, 2, 3); //=> [1, 2, undefined]\n  @symb R.binary(f)(a, b, c) = f(a, b)\n "
  },
  "bind": {
    "prefix": "Rbind",
    "body": [
      "R.bind($Function, $Object)"
    ],
    "description": "\n  Creates a function that is bound to a context.\n  Note: `R.bind` does not provide the additional argument-binding capabilities of\n  [Function.prototype.bind](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind).\n \n  @func\n  @memberOf R\n  @since v0.6.0\n  @category Function\n  @category Object\n  @sig ( -> ) -> {} -> ( -> )\n  @param {Function} fn The function to bind to context\n  @param {Object} thisObj The context to bind `fn` to\n  @return {Function} A function that will execute in the context of `thisObj`.\n  @see R.partial\n  @example\n \n       var log = R.bind(console.log, console);\n       R.pipe(R.assoc('a', 2), R.tap(log), R.assoc('a', 3))({a: 1}); //=> {a: 3}\n       // logs {a: 2}\n  @symb R.bind(f, o)(a, b) = f.call(o, a, b)\n "
  },
  "both": {
    "prefix": "Rboth",
    "body": [
      "R.both($Function, $Function)"
    ],
    "description": "\n  A function which calls the two provided functions and returns the `&&`\n  of the results.\n  It returns the result of the first function if it is false-y and the result\n  of the second function otherwise. Note that this is short-circuited,\n  meaning that the second function will not be invoked if the first returns a\n  false-y value.\n \n  In addition to functions, `R.both` also accepts any fantasy-land compatible\n  applicative functor.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category Logic\n  @sig (... -> Boolean) -> (... -> Boolean) -> (... -> Boolean)\n  @param {Function} f A predicate\n  @param {Function} g Another predicate\n  @return {Function} a function that applies its arguments to `f` and `g` and `&&`s their outputs together.\n  @see R.and\n  @example\n \n       var gt10 = R.gt(R.__, 10)\n       var lt20 = R.lt(R.__, 20)\n       var f = R.both(gt10, lt20);\n       f(15); //=> true\n       f(30); //=> false\n "
  },
  "call": {
    "prefix": "Rcall",
    "body": [
      "R.call($Function, $...)"
    ],
    "description": "\n  Returns the result of calling its first argument with the remaining\n  arguments. This is occasionally useful as a converging function for\n  [`R.converge`](#converge): the first branch can produce a function while the\n  remaining branches produce values to be passed to that function as its\n  arguments.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Function\n  @sig (... -> a),... -> a\n  @param {Function} fn The function to apply to the remaining arguments.\n  @param {...} args Any number of positional arguments.\n  @return {}\n  @see R.apply\n  @example\n \n       R.call(R.add, 1, 2); //=> 3\n \n       var indentN = R.pipe(R.repeat(' '),\n                            R.join(''),\n                            R.replace(/^(?!$)/gm));\n \n       var format = R.converge(R.call, [\n                                   R.pipe(R.prop('indent'), indentN),\n                                   R.prop('value')\n                               ]);\n \n       format({indent: 2, value: 'foo\\nbar\\nbaz\\n'}); //=> '  foo\\n  bar\\n  baz\\n'\n  @symb R.call(f, a, b) = f(a, b)\n "
  },
  "chain": {
    "prefix": "Rchain",
    "body": [
      "R.chain($Function, $Array)"
    ],
    "description": "\n  `chain` maps a function over a list and concatenates the results. `chain`\n  is also known as `flatMap` in some libraries\n \n  Dispatches to the `chain` method of the second argument, if present,\n  according to the [FantasyLand Chain spec](https://github.com/fantasyland/fantasy-land#chain).\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category List\n  @sig Chain m => (a -> m b) -> m a -> m b\n  @param {Function} fn The function to map with\n  @param {Array} list The list to map over\n  @return {Array} The result of flat-mapping `list` with `fn`\n  @example\n \n       var duplicate = n => [n, n];\n       R.chain(duplicate, [1, 2, 3]); //=> [1, 1, 2, 2, 3, 3]\n \n       R.chain(R.append, R.head)([1, 2, 3]); //=> [1, 2, 3, 1]\n "
  },
  "clamp": {
    "prefix": "Rclamp",
    "body": [
      "R.clamp($Number, $Number, $Number)"
    ],
    "description": "\n  Restricts a number to be within a range.\n \n  Also works for other ordered types such as Strings and Dates.\n \n  @func\n  @memberOf R\n  @since v0.20.0\n  @category Relation\n  @sig Ord a => a -> a -> a -> a\n  @param {Number} minimum The lower limit of the clamp (inclusive)\n  @param {Number} maximum The upper limit of the clamp (inclusive)\n  @param {Number} value Value to be clamped\n  @return {Number} Returns `minimum` when `val < minimum`, `maximum` when `val > maximum`, returns `val` otherwise\n  @example\n \n       R.clamp(1, 10, -5) // => 1\n       R.clamp(1, 10, 15) // => 10\n       R.clamp(1, 10, 4)  // => 4\n "
  },
  "clone": {
    "prefix": "Rclone",
    "body": [
      "R.clone($[any])"
    ],
    "description": "\n  Creates a deep copy of the value which may contain (nested) `Array`s and\n  `Object`s, `Number`s, `String`s, `Boolean`s and `Date`s. `Function`s are\n  assigned by reference rather than copied\n \n  Dispatches to a `clone` method if present.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig {} -> {}\n  @param {} value The object or array to clone\n  @return {} A deeply cloned copy of `val`\n  @example\n \n       var objects = [{}, {}, {}];\n       var objectsClone = R.clone(objects);\n       objects === objectsClone; //=> false\n       objects[0] === objectsClone[0]; //=> false\n "
  },
  "comparator": {
    "prefix": "Rcomparator",
    "body": [
      "R.comparator($Function)"
    ],
    "description": "\n  Makes a comparator function out of a function that reports whether the first\n  element is less than the second.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig ((a, b) -> Boolean) -> ((a, b) -> Number)\n  @param {Function} pred A predicate function of arity two which will return `true` if the first argument\n  is less than the second, `false` otherwise\n  @return {Function} A Function :: a -> b -> Int that returns `-1` if a < b, `1` if b < a, otherwise `0`\n  @example\n \n       var byAge = R.comparator((a, b) => a.age < b.age);\n       var people = [\n         // ...\n       ];\n       var peopleByIncreasingAge = R.sort(byAge, people);\n "
  },
  "complement": {
    "prefix": "Rcomplement",
    "body": [
      "R.complement($Function)"
    ],
    "description": "\n  Takes a function `f` and returns a function `g` such that if called with the same arguments\n  when `f` returns a \"truthy\" value, `g` returns `false` and when `f` returns a \"falsy\" value `g` returns `true`.\n \n  `R.complement` may be applied to any functor\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category Logic\n  @sig (... -> ) -> (... -> Boolean)\n  @param {Function} f\n  @return {Function}\n  @see R.not\n  @example\n \n       var isNotNil = R.complement(R.isNil);\n       isNil(null); //=> true\n       isNotNil(null); //=> false\n       isNil(7); //=> false\n       isNotNil(7); //=> true\n "
  },
  "compose": {
    "prefix": "Rcompose",
    "body": [
      "R.compose($...Function)"
    ],
    "description": "\n  Performs right-to-left function composition. The rightmost function may have\n  any arity; the remaining functions must be unary.\n \n  Note: The result of compose is not automatically curried.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig ((y -> z), (x -> y), ..., (o -> p), ((a, b, ..., n) -> o)) -> ((a, b, ..., n) -> z)\n  @param {...Function} ...functions The functions to compose\n  @return {Function}\n  @see R.pipe\n  @example\n \n       var classyGreeting = (firstName, lastName) => \"The name's \" + lastName + \", \" + firstName + \" \" + lastName\n       var yellGreeting = R.compose(R.toUpper, classyGreeting);\n       yellGreeting('James', 'Bond'); //=> \"THE NAME'S BOND, JAMES BOND\"\n \n       R.compose(Math.abs, R.add(1), R.multiply(2))(-4) //=> 7\n \n  @symb R.compose(f, g, h)(a, b) = f(g(h(a, b)))\n "
  },
  "composeK": {
    "prefix": "RcomposeK",
    "body": [
      "R.composeK($...Function)"
    ],
    "description": "\n  Returns the right-to-left Kleisli composition of the provided functions,\n  each of which must return a value of a type supported by [`chain`](#chain).\n \n  `R.composeK(h, g, f)` is equivalent to `R.compose(R.chain(h), R.chain(g), f)`.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Function\n  @sig Chain m => ((y -> m z), (x -> m y), ..., (a -> m b)) -> (a -> m z)\n  @param {...Function} ...functions The functions to compose\n  @return {Function}\n  @see R.pipeK\n  @example\n \n        //  get :: String -> Object -> Maybe \n        var get = R.curry((propName, obj) => Maybe(obj[propName]))\n \n        //  getStateCode :: Maybe String -> Maybe String\n        var getStateCode = R.composeK(\n          R.compose(Maybe.of, R.toUpper),\n          get('state'),\n          get('address'),\n          get('user'),\n        );\n        getStateCode({\"user\":{\"address\":{\"state\":\"ny\"}}}); //=> Maybe.Just(\"NY\")\n        getStateCode({}); //=> Maybe.Nothing()\n  @symb R.composeK(f, g, h)(a) = R.chain(f, R.chain(g, h(a)))\n "
  },
  "composeP": {
    "prefix": "RcomposeP",
    "body": [
      "R.composeP($...Function)"
    ],
    "description": "\n  Performs right-to-left composition of one or more Promise-returning\n  functions. The rightmost function may have any arity; the remaining\n  functions must be unary.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category Function\n  @sig ((y -> Promise z), (x -> Promise y), ..., (a -> Promise b)) -> (a -> Promise z)\n  @param {...Function} functions The functions to compose\n  @return {Function}\n  @see R.pipeP\n  @example\n \n       var db = {\n         users: {\n           JOE: {\n             name: 'Joe',\n             followers: ['STEVE', 'SUZY']\n           }\n         }\n       }\n \n       // We'll pretend to do a db lookup which returns a promise\n       var lookupUser = (userId) => Promise.resolve(db.users[userId])\n       var lookupFollowers = (user) => Promise.resolve(user.followers)\n       lookupUser('JOE').then(lookupFollowers)\n \n       //  followersForUser :: String -> Promise [UserId]\n       var followersForUser = R.composeP(lookupFollowers, lookupUser);\n       followersForUser('JOE').then(followers => console.log('Followers:', followers))\n       // Followers: [\"STEVE\",\"SUZY\"]\n "
  },
  "concat": {
    "prefix": "Rconcat",
    "body": [
      "R.concat($Array|String, $Array|String)"
    ],
    "description": "\n  Returns the result of concatenating the given lists or strings.\n \n  Note: `R.concat` expects both arguments to be of the same type,\n  unlike the native `Array.prototype.concat` method. It will throw\n  an error if you `concat` an Array with a non-Array value.\n \n  Dispatches to the `concat` method of the first argument, if present.\n  Can also concatenate two members of a [fantasy-land\n  compatible semigroup](https://github.com/fantasyland/fantasy-land#semigroup).\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [a] -> [a]\n  @sig String -> String -> String\n  @param {Array|String} firstList The first list\n  @param {Array|String} secondList The second list\n  @return {Array|String} A list consisting of the elements of `firstList` followed by the elements of\n  `secondList`.\n \n  @example\n \n       R.concat('ABC', 'DEF'); // 'ABCDEF'\n       R.concat([4, 5, 6], [1, 2, 3]); //=> [4, 5, 6, 1, 2, 3]\n       R.concat([], []); //=> []\n "
  },
  "cond": {
    "prefix": "Rcond",
    "body": [
      "R.cond($Array)"
    ],
    "description": "\n  Returns a function, `fn`, which encapsulates `if/else, if/else, ...` logic.\n  `R.cond` takes a list of [predicate, transformer] pairs. All of the arguments\n  to `fn` are applied to each of the predicates in turn until one returns a\n  \"truthy\" value, at which point `fn` returns the result of applying its\n  arguments to the corresponding transformer. If none of the predicates\n  matches, `fn` returns undefined.\n \n  @func\n  @memberOf R\n  @since v0.6.0\n  @category Logic\n  @sig [[(... -> Boolean),(... -> )]] -> (... -> )\n  @param {Array} pairs A list of [predicate, transformer]\n  @return {Function}\n  @example\n \n       var fn = R.cond([\n         [R.equals(0),   R.always('water freezes at 0°C')],\n         [R.equals(100), R.always('water boils at 100°C')],\n         [R.T,           temp => 'nothing special happens at ' + temp + '°C']\n       ]);\n       fn(0); //=> 'water freezes at 0°C'\n       fn(50); //=> 'nothing special happens at 50°C'\n       fn(100); //=> 'water boils at 100°C'\n "
  },
  "construct": {
    "prefix": "Rconstruct",
    "body": [
      "R.construct($Function)"
    ],
    "description": "\n  Wraps a constructor function inside a curried function that can be called\n  with the same arguments and returns the same type.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig ( -> {}) -> ( -> {})\n  @param {Function} fn The constructor function to wrap.\n  @return {Function} A wrapped, curried constructor function.\n  @see R.invoker\n  @example\n \n       // Constructor function\n       function Animal(kind) {\n         this.kind = kind;\n       };\n       Animal.prototype.sighting = function() {\n         return \"It's a \" + this.kind + \"!\";\n       }\n \n       var AnimalConstructor = R.construct(Animal)\n \n       // Notice we no longer need the 'new' keyword:\n       AnimalConstructor('Pig'); //=> {\"kind\": \"Pig\", \"sighting\": function (){...}};\n \n       var animalTypes = [\"Lion\", \"Tiger\", \"Bear\"];\n       var animalSighting = R.invoker(0, 'sighting');\n       var sightNewAnimal = R.compose(animalSighting, AnimalConstructor);\n       R.map(sightNewAnimal, animalTypes); //=> [\"It's a Lion!\", \"It's a Tiger!\", \"It's a Bear!\"]\n "
  },
  "constructN": {
    "prefix": "RconstructN",
    "body": [
      "R.constructN($Number, $Function)"
    ],
    "description": "\n  Wraps a constructor function inside a curried function that can be called\n  with the same arguments and returns the same type. The arity of the function\n  returned is specified to allow using variadic constructor functions.\n \n  @func\n  @memberOf R\n  @since v0.4.0\n  @category Function\n  @sig Number -> ( -> {}) -> ( -> {})\n  @param {Number} n The arity of the constructor function.\n  @param {Function} Fn The constructor function to wrap.\n  @return {Function} A wrapped, curried constructor function.\n  @example\n \n       // Variadic Constructor function\n       function Salad() {\n         this.ingredients = arguments;\n       }\n \n       Salad.prototype.recipe = function() {\n         var instructions = R.map(ingredient => 'Add a dollop of ' + ingredient, this.ingredients);\n         return R.join('\\n', instructions);\n       };\n \n       var ThreeLayerSalad = R.constructN(3, Salad);\n \n       // Notice we no longer need the 'new' keyword, and the constructor is curried for 3 arguments.\n       var salad = ThreeLayerSalad('Mayonnaise')('Potato Chips')('Ketchup');\n \n       console.log(salad.recipe());\n       // Add a dollop of Mayonnaise\n       // Add a dollop of Potato Chips\n       // Add a dollop of Ketchup\n "
  },
  "contains": {
    "prefix": "Rcontains",
    "body": [
      "R.contains($Object, $Array)"
    ],
    "description": "\n  Returns `true` if the specified value is equal, in [`R.equals`](#equals)\n  terms, to at least one element of the given list; `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig a -> [a] -> Boolean\n  @param {Object} a The item to compare against.\n  @param {Array} list The array to consider.\n  @return {Boolean} `true` if an equivalent item is in the list, `false` otherwise.\n  @see R.any\n  @example\n \n       R.contains(3, [1, 2, 3]); //=> true\n       R.contains(4, [1, 2, 3]); //=> false\n       R.contains({ name: 'Fred' }, [{ name: 'Fred' }]); //=> true\n       R.contains([42], [[42]]); //=> true\n "
  },
  "converge": {
    "prefix": "Rconverge",
    "body": [
      "R.converge($Function, $Array)"
    ],
    "description": "\n  Accepts a converging function and a list of branching functions and returns\n  a new function. When invoked, this new function is applied to some\n  arguments, each branching function is applied to those same arguments. The\n  results of each branching function are passed as arguments to the converging\n  function to produce the return value.\n \n  @func\n  @memberOf R\n  @since v0.4.2\n  @category Function\n  @sig ((x1, x2, ...) -> z) -> [((a, b, ...) -> x1), ((a, b, ...) -> x2), ...] -> (a -> b -> ... -> z)\n  @param {Function} after A function. `after` will be invoked with the return values of\n         `fn1` and `fn2` as its arguments.\n  @param {Array} functions A list of functions.\n  @return {Function} A new function.\n  @see R.useWith\n  @example\n \n       var average = R.converge(R.divide, [R.sum, R.length])\n       average([1, 2, 3, 4, 5, 6, 7]) //=> 4\n \n       var strangeConcat = R.converge(R.concat, [R.toUpper, R.toLower])\n       strangeConcat(\"Yodel\") //=> \"YODELyodel\"\n \n  @symb R.converge(f, [g, h])(a, b) = f(g(a, b), h(a, b))\n "
  },
  "countBy": {
    "prefix": "RcountBy",
    "body": [
      "R.countBy($Function, $Array)"
    ],
    "description": "\n  Counts the elements of a list according to how many match each value of a\n  key generated by the supplied function. Returns an object mapping the keys\n  produced by `fn` to the number of occurrences in the list. Note that all\n  keys are coerced to strings because of how JavaScript objects work.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig (a -> String) -> [a] -> {}\n  @param {Function} fn The function used to map values to keys.\n  @param {Array} list The list to count elements from.\n  @return {Object} An object mapping keys to number of occurrences in the list.\n  @example\n \n       var numbers = [1.0, 1.1, 1.2, 2.0, 3.0, 2.2];\n       R.countBy(Math.floor)(numbers);    //=> {'1': 3, '2': 2, '3': 1}\n \n       var letters = ['a', 'b', 'A', 'a', 'B', 'c'];\n       R.countBy(R.toLower)(letters);   //=> {'a': 3, 'b': 2, 'c': 1}\n "
  },
  "curry": {
    "prefix": "Rcurry",
    "body": [
      "R.curry($Function)"
    ],
    "description": "\n  Returns a curried equivalent of the provided function. The curried function\n  has two unusual capabilities. First, its arguments needn't be provided one\n  at a time. If `f` is a ternary function and `g` is `R.curry(f)`, the\n  following are equivalent:\n \n    - `g(1)(2)(3)`\n    - `g(1)(2, 3)`\n    - `g(1, 2)(3)`\n    - `g(1, 2, 3)`\n \n  Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n  \"gaps\", allowing partial application of any combination of arguments,\n  regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n  the following are equivalent:\n \n    - `g(1, 2, 3)`\n    - `g(_, 2, 3)(1)`\n    - `g(_, _, 3)(1)(2)`\n    - `g(_, _, 3)(1, 2)`\n    - `g(_, 2)(1)(3)`\n    - `g(_, 2)(1, 3)`\n    - `g(_, 2)(_, 3)(1)`\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig ( -> a) -> ( -> a)\n  @param {Function} fn The function to curry.\n  @return {Function} A new, curried function.\n  @see R.curryN\n  @example\n \n       var addFourNumbers = (a, b, c, d) => a + b + c + d;\n \n       var curriedAddFourNumbers = R.curry(addFourNumbers);\n       var f = curriedAddFourNumbers(1, 2);\n       var g = f(3);\n       g(4); //=> 10\n "
  },
  "curryN": {
    "prefix": "RcurryN",
    "body": [
      "R.curryN($Number, $Function)"
    ],
    "description": "\n  Returns a curried equivalent of the provided function, with the specified\n  arity. The curried function has two unusual capabilities. First, its\n  arguments needn't be provided one at a time. If `g` is `R.curryN(3, f)`, the\n  following are equivalent:\n \n    - `g(1)(2)(3)`\n    - `g(1)(2, 3)`\n    - `g(1, 2)(3)`\n    - `g(1, 2, 3)`\n \n  Secondly, the special placeholder value [`R.__`](#__) may be used to specify\n  \"gaps\", allowing partial application of any combination of arguments,\n  regardless of their positions. If `g` is as above and `_` is [`R.__`](#__),\n  the following are equivalent:\n \n    - `g(1, 2, 3)`\n    - `g(_, 2, 3)(1)`\n    - `g(_, _, 3)(1)(2)`\n    - `g(_, _, 3)(1, 2)`\n    - `g(_, 2)(1)(3)`\n    - `g(_, 2)(1, 3)`\n    - `g(_, 2)(_, 3)(1)`\n \n  @func\n  @memberOf R\n  @since v0.5.0\n  @category Function\n  @sig Number -> ( -> a) -> ( -> a)\n  @param {Number} length The arity for the returned function.\n  @param {Function} fn The function to curry.\n  @return {Function} A new, curried function.\n  @see R.curry\n  @example\n \n       var sumArgs = (...args) => R.sum(args);\n \n       var curriedAddFourNumbers = R.curryN(4, sumArgs);\n       var f = curriedAddFourNumbers(1, 2);\n       var g = f(3);\n       g(4); //=> 10\n "
  },
  "dec": {
    "prefix": "Rdec",
    "body": [
      "R.dec($Number)"
    ],
    "description": "\n  Decrements its argument.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Math\n  @sig Number -> Number\n  @param {Number} n\n  @return {Number} n - 1\n  @see R.inc\n  @example\n \n       R.dec(42); //=> 41\n "
  },
  "defaultTo": {
    "prefix": "RdefaultTo",
    "body": [
      "R.defaultTo($a, $b)"
    ],
    "description": "\n  Returns the second argument if it is not `null`, `undefined` or `NaN`;\n  otherwise the first argument is returned.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category Logic\n  @sig a -> b -> a | b\n  @param {a} default The default value.\n  @param {b} val `val` will be returned instead of `default` unless `val` is `null`, `undefined` or `NaN`.\n  @return {} The second value if it is not `null`, `undefined` or `NaN`, otherwise the default value\n  @example\n \n       var defaultTo42 = R.defaultTo(42);\n \n       defaultTo42(null);  //=> 42\n       defaultTo42(undefined);  //=> 42\n       defaultTo42('Ramda');  //=> 'Ramda'\n       // parseInt('string') results in NaN\n       defaultTo42(parseInt('string')); //=> 42\n "
  },
  "descend": {
    "prefix": "Rdescend",
    "body": [
      "R.descend($Function, $[any], $[any])"
    ],
    "description": "\n  Makes a descending comparator function out of a function that returns a value\n  that can be compared with `<` and `>`.\n \n  @func\n  @memberOf R\n  @since v0.23.0\n  @category Function\n  @sig Ord b => (a -> b) -> a -> a -> Number\n  @param {Function} fn A function of arity one that returns a value that can be compared\n  @param {} a The first item to be compared.\n  @param {} b The second item to be compared.\n  @return {Number} `-1` if fn(a) > fn(b), `1` if fn(b) > fn(a), otherwise `0`\n  @see R.ascend\n  @example\n \n       var byAge = R.descend(R.prop('age'));\n       var people = [\n         // ...\n       ];\n       var peopleByOldestFirst = R.sort(byAge, people);\n "
  },
  "difference": {
    "prefix": "Rdifference",
    "body": [
      "R.difference($Array, $Array)"
    ],
    "description": "\n  Finds the set (i.e. no duplicates) of all elements in the first list not\n  contained in the second list. Objects and Arrays are compared in terms of\n  value equality, not reference equality.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig [] -> [] -> []\n  @param {Array} list1 The first list.\n  @param {Array} list2 The second list.\n  @return {Array} The elements in `list1` that are not in `list2`.\n  @see R.differenceWith, R.symmetricDifference, R.symmetricDifferenceWith, R.without\n  @example\n \n       R.difference([1,2,3,4], [7,6,5,4,3]); //=> [1,2]\n       R.difference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5]\n       R.difference([{a: 1}, {b: 2}], [{a: 1}, {c: 3}]) //=> [{b: 2}]\n "
  },
  "differenceWith": {
    "prefix": "RdifferenceWith",
    "body": [
      "R.differenceWith($Function, $Array, $Array)"
    ],
    "description": "\n  Finds the set (i.e. no duplicates) of all elements in the first list not\n  contained in the second list. Duplication is determined according to the\n  value returned by applying the supplied predicate to two list elements.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n  @param {Function} pred A predicate used to test whether two items are equal.\n  @param {Array} list1 The first list.\n  @param {Array} list2 The second list.\n  @return {Array} The elements in `list1` that are not in `list2`.\n  @see R.difference, R.symmetricDifference, R.symmetricDifferenceWith\n  @example\n \n       var cmp = (x, y) => x.a === y.a;\n       var l1 = [{a: 1}, {a: 2}, {a: 3}];\n       var l2 = [{a: 3}, {a: 4}];\n       R.differenceWith(cmp, l1, l2); //=> [{a: 1}, {a: 2}]\n "
  },
  "dissoc": {
    "prefix": "Rdissoc",
    "body": [
      "R.dissoc($String, $Object)"
    ],
    "description": "\n  Returns a new object that does not contain a `prop` property.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category Object\n  @sig String -> {k: v} -> {k: v}\n  @param {String} prop The name of the property to dissociate\n  @param {Object} obj The object to clone\n  @return {Object} A new object equivalent to the original but without the specified property\n  @see R.assoc\n  @example\n \n       R.dissoc('b', {a: 1, b: 2, c: 3}); //=> {a: 1, c: 3}\n "
  },
  "dissocPath": {
    "prefix": "RdissocPath",
    "body": [
      "R.dissocPath($Array, $Object)"
    ],
    "description": "\n  Makes a shallow clone of an object, omitting the property at the given path.\n  Note that this copies and flattens prototype properties onto the new object\n  as well. All non-primitive properties are copied by reference.\n \n  @func\n  @memberOf R\n  @since v0.11.0\n  @category Object\n  @typedefn Idx = String | Int\n  @sig [Idx] -> {k: v} -> {k: v}\n  @param {Array} path The path to the value to omit\n  @param {Object} obj The object to clone\n  @return {Object} A new object without the property at path\n  @see R.assocPath\n  @example\n \n       R.dissocPath(['a', 'b', 'c'], {a: {b: {c: 42}}}); //=> {a: {b: {}}}\n "
  },
  "divide": {
    "prefix": "Rdivide",
    "body": [
      "R.divide($Number, $Number)"
    ],
    "description": "\n  Divides two numbers. Equivalent to `a / b`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Math\n  @sig Number -> Number -> Number\n  @param {Number} a The first value.\n  @param {Number} b The second value.\n  @return {Number} The result of `a / b`.\n  @see R.multiply\n  @example\n \n       R.divide(71, 100); //=> 0.71\n \n       var half = R.divide(R.__, 2);\n       half(42); //=> 21\n \n       var reciprocal = R.divide(1);\n       reciprocal(4);   //=> 0.25\n "
  },
  "drop": {
    "prefix": "Rdrop",
    "body": [
      "R.drop($Number, $[any])"
    ],
    "description": "\n  Returns all but the first `n` elements of the given list, string, or\n  transducer/transformer (or object with a `drop` method).\n \n  Dispatches to the `drop` method of the second argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Number -> [a] -> [a]\n  @sig Number -> String -> String\n  @param {Number} n\n  @param {} list\n  @return {} A copy of list without the first `n` elements\n  @see R.take, R.transduce, R.dropLast, R.dropWhile\n  @example\n \n       R.drop(1, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n       R.drop(2, ['foo', 'bar', 'baz']); //=> ['baz']\n       R.drop(3, ['foo', 'bar', 'baz']); //=> []\n       R.drop(4, ['foo', 'bar', 'baz']); //=> []\n       R.drop(3, 'ramda');               //=> 'da'\n "
  },
  "dropLast": {
    "prefix": "RdropLast",
    "body": [
      "R.dropLast($Number, $Array)"
    ],
    "description": "\n  Returns a list containing all but the last `n` elements of the given `list`.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category List\n  @sig Number -> [a] -> [a]\n  @sig Number -> String -> String\n  @param {Number} n The number of elements of `list` to skip.\n  @param {Array} list The list of elements to consider.\n  @return {Array} A copy of the list with only the first `list.length - n` elements\n  @see R.takeLast, R.drop, R.dropWhile, R.dropLastWhile\n  @example\n \n       R.dropLast(1, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n       R.dropLast(2, ['foo', 'bar', 'baz']); //=> ['foo']\n       R.dropLast(3, ['foo', 'bar', 'baz']); //=> []\n       R.dropLast(4, ['foo', 'bar', 'baz']); //=> []\n       R.dropLast(3, 'ramda');               //=> 'ra'\n "
  },
  "dropLastWhile": {
    "prefix": "RdropLastWhile",
    "body": [
      "R.dropLastWhile($Function, $Array)"
    ],
    "description": "\n  Returns a new list excluding all the tailing elements of a given list which\n  satisfy the supplied predicate function. It passes each value from the right\n  to the supplied predicate function, skipping elements until the predicate\n  function returns a `falsy` value. The predicate function is applied to one argument:\n  (value).\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> [a]\n  @sig (a -> Boolean) -> String -> String\n  @param {Function} predicate The function to be called on each element\n  @param {Array} xs The collection to iterate over.\n  @return {Array} A new array without any trailing elements that return `falsy` values from the `predicate`.\n  @see R.takeLastWhile, R.addIndex, R.drop, R.dropWhile\n  @example\n \n       var lteThree = x => x <= 3;\n \n       R.dropLastWhile(lteThree, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3, 4]\n \n       R.dropLastWhile(x => x !== 'd' , 'Ramda'); //=> 'Ramd'\n "
  },
  "dropRepeats": {
    "prefix": "RdropRepeats",
    "body": [
      "R.dropRepeats($Array)"
    ],
    "description": "\n  Returns a new list without any consecutively repeating elements.\n  [`R.equals`](#equals) is used to determine equality.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category List\n  @sig [a] -> [a]\n  @param {Array} list The array to consider.\n  @return {Array} `list` without repeating elements.\n  @see R.transduce\n  @example\n \n      R.dropRepeats([1, 1, 1, 2, 3, 4, 4, 2, 2]); //=> [1, 2, 3, 4, 2]\n "
  },
  "dropRepeatsWith": {
    "prefix": "RdropRepeatsWith",
    "body": [
      "R.dropRepeatsWith($Function, $Array)"
    ],
    "description": "\n  Returns a new list without any consecutively repeating elements. Equality is\n  determined by applying the supplied predicate to each pair of consecutive elements. The\n  first element in a series of equal elements will be preserved.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category List\n  @sig ((a, a) -> Boolean) -> [a] -> [a]\n  @param {Function} pred A predicate used to test whether two items are equal.\n  @param {Array} list The array to consider.\n  @return {Array} `list` without repeating elements.\n  @see R.transduce\n  @example\n \n       var l = [1, -1, 1, 3, 4, -4, -4, -5, 5, 3, 3];\n       R.dropRepeatsWith(R.eqBy(Math.abs), l); //=> [1, 3, 4, -5, 3]\n "
  },
  "dropWhile": {
    "prefix": "RdropWhile",
    "body": [
      "R.dropWhile($Function, $Array)"
    ],
    "description": "\n  Returns a new list excluding the leading elements of a given list which\n  satisfy the supplied predicate function. It passes each value to the supplied\n  predicate function, skipping elements while the predicate function returns\n  `true`. The predicate function is applied to one argument: (value).\n \n  Dispatches to the `dropWhile` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> [a]\n  @sig (a -> Boolean) -> String -> String\n  @param {Function} fn The function called per iteration.\n  @param {Array} xs The collection to iterate over.\n  @return {Array} A new array.\n  @see R.takeWhile, R.transduce, R.addIndex\n  @example\n \n       var lteTwo = x => x <= 2;\n \n       R.dropWhile(lteTwo, [1, 2, 3, 4, 3, 2, 1]); //=> [3, 4, 3, 2, 1]\n \n       R.dropWhile(x => x !== 'd' , 'Ramda'); //=> 'da'\n "
  },
  "either": {
    "prefix": "Reither",
    "body": [
      "R.either($Function, $Function)"
    ],
    "description": "\n  A function wrapping calls to the two functions in an `||` operation,\n  returning the result of the first function if it is truth-y and the result\n  of the second function otherwise. Note that this is short-circuited,\n  meaning that the second function will not be invoked if the first returns a\n  truth-y value.\n \n  In addition to functions, `R.either` also accepts any fantasy-land compatible\n  applicative functor.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category Logic\n  @sig (... -> Boolean) -> (... -> Boolean) -> (... -> Boolean)\n  @param {Function} f a predicate\n  @param {Function} g another predicate\n  @return {Function} a function that applies its arguments to `f` and `g` and `||`s their outputs together.\n  @see R.or\n  @example\n \n       var gt10 = x => x > 10;\n       var even = x => x % 2 === 0;\n       var f = R.either(gt10, even);\n       f(101); //=> true\n       f(8); //=> true\n "
  },
  "empty": {
    "prefix": "Rempty",
    "body": [
      "R.empty($[any])"
    ],
    "description": "\n  Returns the empty value of its argument's type. Ramda defines the empty\n  value of Array (`[]`), Object (`{}`), String (`''`), and Arguments. Other\n  types are supported if they define `<Type>.empty`,\n  `<Type>.prototype.empty` or implement the\n  [FantasyLand Monoid spec](https://github.com/fantasyland/fantasy-land#monoid).\n \n  Dispatches to the `empty` method of the first argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category Function\n  @sig a -> a\n  @param {} x\n  @return {}\n  @example\n \n       R.empty(Just(42));      //=> Nothing()\n       R.empty([1, 2, 3]);     //=> []\n       R.empty('unicorns');    //=> ''\n       R.empty({x: 1, y: 2});  //=> {}\n "
  },
  "endsWith": {
    "prefix": "RendsWith",
    "body": [
      "R.endsWith($[any], $[any])"
    ],
    "description": "\n  Checks if a list ends with the provided values\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category List\n  @sig [a] -> Boolean\n  @sig String -> Boolean\n  @param {} suffix\n  @param {} list\n  @return {Boolean}\n  @example\n \n       R.endsWith('c', 'abc')                //=> true\n       R.endsWith('b', 'abc')                //=> false\n       R.endsWith(['c'], ['a', 'b', 'c'])    //=> true\n       R.endsWith(['b'], ['a', 'b', 'c'])    //=> false\n "
  },
  "eqBy": {
    "prefix": "ReqBy",
    "body": [
      "R.eqBy($Function, $[any], $[any])"
    ],
    "description": "\n  Takes a function and two values in its domain and returns `true` if the\n  values map to the same value in the codomain; `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.18.0\n  @category Relation\n  @sig (a -> b) -> a -> a -> Boolean\n  @param {Function} f\n  @param {} x\n  @param {} y\n  @return {Boolean}\n  @example\n \n       R.eqBy(Math.abs, 5, -5); //=> true\n "
  },
  "eqProps": {
    "prefix": "ReqProps",
    "body": [
      "R.eqProps($String, $Object, $Object)"
    ],
    "description": "\n  Reports whether two objects have the same value, in [`R.equals`](#equals)\n  terms, for the specified property. Useful as a curried predicate.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig k -> {k: v} -> {k: v} -> Boolean\n  @param {String} prop The name of the property to compare\n  @param {Object} obj1\n  @param {Object} obj2\n  @return {Boolean}\n \n  @example\n \n       var o1 = { a: 1, b: 2, c: 3, d: 4 };\n       var o2 = { a: 10, b: 20, c: 3, d: 40 };\n       R.eqProps('a', o1, o2); //=> false\n       R.eqProps('c', o1, o2); //=> true\n "
  },
  "equals": {
    "prefix": "Requals",
    "body": [
      "R.equals($[any], $[any])"
    ],
    "description": "\n  Returns `true` if its arguments are equivalent, `false` otherwise. Handles\n  cyclical data structures.\n \n  Dispatches symmetrically to the `equals` methods of both arguments, if\n  present.\n \n  @func\n  @memberOf R\n  @since v0.15.0\n  @category Relation\n  @sig a -> b -> Boolean\n  @param {} a\n  @param {} b\n  @return {Boolean}\n  @example\n \n       R.equals(1, 1); //=> true\n       R.equals(1, '1'); //=> false\n       R.equals([1, 2, 3], [1, 2, 3]); //=> true\n \n       var a = {}; a.v = a;\n       var b = {}; b.v = b;\n       R.equals(a, b); //=> true\n "
  },
  "evolve": {
    "prefix": "Revolve",
    "body": [
      "R.evolve($Object, $Object)"
    ],
    "description": "\n  Creates a new object by recursively evolving a shallow copy of `object`,\n  according to the `transformation` functions. All non-primitive properties\n  are copied by reference.\n \n  A `transformation` function will not be invoked if its corresponding key\n  does not exist in the evolved object.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Object\n  @sig {k: (v -> v)} -> {k: v} -> {k: v}\n  @param {Object} transformations The object specifying transformation functions to apply\n         to the object.\n  @param {Object} object The object to be transformed.\n  @return {Object} The transformed object.\n  @example\n \n       var tomato  = {firstName: '  Tomato ', data: {elapsed: 100, remaining: 1400}, id:123};\n       var transformations = {\n         firstName: R.trim,\n         lastName: R.trim, // Will not get invoked.\n         data: {elapsed: R.add(1), remaining: R.add(-1)}\n       };\n       R.evolve(transformations, tomato); //=> {firstName: 'Tomato', data: {elapsed: 101, remaining: 1399}, id:123}\n "
  },
  "F": {
    "prefix": "RF",
    "body": [
      "R.F($[any])"
    ],
    "description": "\n  A function that always returns `false`. Any passed in parameters are ignored.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Function\n  @sig  -> Boolean\n  @param {}\n  @return {Boolean}\n  @see R.always, R.T\n  @example\n \n       R.F(); //=> false\n "
  },
  "filter": {
    "prefix": "Rfilter",
    "body": [
      "R.filter($Function, $Array)"
    ],
    "description": "\n  Takes a predicate and a `Filterable`, and returns a new filterable of the\n  same type containing the members of the given filterable which satisfy the\n  given predicate. Filterable objects include plain objects or any object\n  that has a filter method such as `Array`.\n \n  Dispatches to the `filter` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Filterable f => (a -> Boolean) -> f a -> f a\n  @param {Function} pred\n  @param {Array} filterable\n  @return {Array} Filterable\n  @see R.reject, R.transduce, R.addIndex\n  @example\n \n       var isEven = n => n % 2 === 0;\n \n       R.filter(isEven, [1, 2, 3, 4]); //=> [2, 4]\n \n       R.filter(isEven, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n "
  },
  "find": {
    "prefix": "Rfind",
    "body": [
      "R.find($Function, $Array)"
    ],
    "description": "\n  Returns the first element of the list which matches the predicate, or\n  `undefined` if no element matches.\n \n  Dispatches to the `find` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> a | undefined\n  @param {Function} fn The predicate function used to determine if the element is the\n         desired one.\n  @param {Array} list The array to consider.\n  @return {Object} The element found, or `undefined`.\n  @see R.transduce\n  @example\n \n       var xs = [{a: 1}, {a: 2}, {a: 3}];\n       R.find(R.propEq('a', 2))(xs); //=> {a: 2}\n       R.find(R.propEq('a', 4))(xs); //=> undefined\n "
  },
  "findIndex": {
    "prefix": "RfindIndex",
    "body": [
      "R.findIndex($Function, $Array)"
    ],
    "description": "\n  Returns the index of the first element of the list which matches the\n  predicate, or `-1` if no element matches.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category List\n  @sig (a -> Boolean) -> [a] -> Number\n  @param {Function} fn The predicate function used to determine if the element is the\n  desired one.\n  @param {Array} list The array to consider.\n  @return {Number} The index of the element found, or `-1`.\n  @see R.transduce\n  @example\n \n       var xs = [{a: 1}, {a: 2}, {a: 3}];\n       R.findIndex(R.propEq('a', 2))(xs); //=> 1\n       R.findIndex(R.propEq('a', 4))(xs); //=> -1\n "
  },
  "findLast": {
    "prefix": "RfindLast",
    "body": [
      "R.findLast($Function, $Array)"
    ],
    "description": "\n  Returns the last element of the list which matches the predicate, or\n  `undefined` if no element matches.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category List\n  @sig (a -> Boolean) -> [a] -> a | undefined\n  @param {Function} fn The predicate function used to determine if the element is the\n  desired one.\n  @param {Array} list The array to consider.\n  @return {Object} The element found, or `undefined`.\n  @see R.transduce\n  @example\n \n       var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n       R.findLast(R.propEq('a', 1))(xs); //=> {a: 1, b: 1}\n       R.findLast(R.propEq('a', 4))(xs); //=> undefined\n "
  },
  "findLastIndex": {
    "prefix": "RfindLastIndex",
    "body": [
      "R.findLastIndex($Function, $Array)"
    ],
    "description": "\n  Returns the index of the last element of the list which matches the\n  predicate, or `-1` if no element matches.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category List\n  @sig (a -> Boolean) -> [a] -> Number\n  @param {Function} fn The predicate function used to determine if the element is the\n  desired one.\n  @param {Array} list The array to consider.\n  @return {Number} The index of the element found, or `-1`.\n  @see R.transduce\n  @example\n \n       var xs = [{a: 1, b: 0}, {a:1, b: 1}];\n       R.findLastIndex(R.propEq('a', 1))(xs); //=> 1\n       R.findLastIndex(R.propEq('a', 4))(xs); //=> -1\n "
  },
  "flatten": {
    "prefix": "Rflatten",
    "body": [
      "R.flatten($Array)"
    ],
    "description": "\n  Returns a new list by pulling every item out of it (and all its sub-arrays)\n  and putting them in a new array, depth-first.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [b]\n  @param {Array} list The array to consider.\n  @return {Array} The flattened list.\n  @see R.unnest\n  @example\n \n       R.flatten([1, 2, [3, 4], 5, [6, [7, 8, [9, [10, 11], 12]]]]);\n       //=> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]\n "
  },
  "flip": {
    "prefix": "Rflip",
    "body": [
      "R.flip($Function)"
    ],
    "description": "\n  Returns a new function much like the supplied one, except that the first two\n  arguments' order is reversed.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig ((a, b, c, ...) -> z) -> (b -> a -> c -> ... -> z)\n  @param {Function} fn The function to invoke with its first two parameters reversed.\n  @return {} The result of invoking `fn` with its first two parameters' order reversed.\n  @example\n \n       var mergeThree = (a, b, c) => [].concat(a, b, c);\n \n       mergeThree(1, 2, 3); //=> [1, 2, 3]\n \n       R.flip(mergeThree)(1, 2, 3); //=> [2, 1, 3]\n  @symb R.flip(f)(a, b, c) = f(b, a, c)\n "
  },
  "forEach": {
    "prefix": "RforEach",
    "body": [
      "R.forEach($Function, $Array)"
    ],
    "description": "\n  Iterate over an input `list`, calling a provided function `fn` for each\n  element in the list.\n \n  `fn` receives one argument: (value).\n \n  Note: `R.forEach` does not skip deleted or unassigned indices (sparse\n  arrays), unlike the native `Array.prototype.forEach` method. For more\n  details on this behavior, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach#Description\n \n  Also note that, unlike `Array.prototype.forEach`, Ramda's `forEach` returns\n  the original array. In some libraries this function is named `each`.\n \n  Dispatches to the `forEach` method of the second argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category List\n  @sig (a -> ) -> [a] -> [a]\n  @param {Function} fn The function to invoke. Receives one argument, `value`.\n  @param {Array} list The list to iterate over.\n  @return {Array} The original list.\n  @see R.addIndex\n  @example\n \n       var printXPlusFive = x => console.log(x + 5);\n       R.forEach(printXPlusFive, [1, 2, 3]); //=> [1, 2, 3]\n       // logs 6\n       // logs 7\n       // logs 8\n  @symb R.forEach(f, [a, b, c]) = [a, b, c]\n "
  },
  "forEachObjIndexed": {
    "prefix": "RforEachObjIndexed",
    "body": [
      "R.forEachObjIndexed($Function, $Object)"
    ],
    "description": "\n  Iterate over an input `object`, calling a provided function `fn` for each\n  key and value in the object.\n \n  `fn` receives three argument: (value, key, obj).\n \n  @func\n  @memberOf R\n  @since v0.23.0\n  @category Object\n  @sig ((a, String, StrMap a) -> Any) -> StrMap a -> StrMap a\n  @param {Function} fn The function to invoke. Receives three argument, `value`, `key`, `obj`.\n  @param {Object} obj The object to iterate over.\n  @return {Object} The original object.\n  @example\n \n       var printKeyConcatValue = (value, key) => console.log(key + ':' + value);\n       R.forEachObjIndexed(printKeyConcatValue, {x: 1, y: 2}); //=> {x: 1, y: 2}\n       // logs x:1\n       // logs y:2\n  @symb R.forEachObjIndexed(f, {x: a, y: b}) = {x: a, y: b}\n "
  },
  "fromPairs": {
    "prefix": "RfromPairs",
    "body": [
      "R.fromPairs($Array)"
    ],
    "description": "\n  Creates a new object from a list key-value pairs. If a key appears in\n  multiple pairs, the rightmost pair is included in the object.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category List\n  @sig [[k,v]] -> {k: v}\n  @param {Array} pairs An array of two-element arrays that will be the keys and values of the output object.\n  @return {Object} The object made by pairing up `keys` and `values`.\n  @see R.toPairs, R.pair\n  @example\n \n       R.fromPairs([['a', 1], ['b', 2], ['c', 3]]); //=> {a: 1, b: 2, c: 3}\n "
  },
  "groupBy": {
    "prefix": "RgroupBy",
    "body": [
      "R.groupBy($Function, $Array)"
    ],
    "description": "\n  Splits a list into sub-lists stored in an object, based on the result of\n  calling a String-returning function on each element, and grouping the\n  results according to values returned.\n \n  Dispatches to the `groupBy` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig (a -> String) -> [a] -> {String: [a]}\n  @param {Function} fn Function :: a -> String\n  @param {Array} list The array to group\n  @return {Object} An object with the output of `fn` for keys, mapped to arrays of elements\n          that produced that key when passed to `fn`.\n  @see R.transduce\n  @example\n \n       var byGrade = R.groupBy(function(student) {\n         var score = student.score;\n         return score < 65 ? 'F' :\n                score < 70 ? 'D' :\n                score < 80 ? 'C' :\n                score < 90 ? 'B' : 'A';\n       });\n       var students = [{name: 'Abby', score: 84},\n                       {name: 'Eddy', score: 58},\n                       // ...\n                       {name: 'Jack', score: 69}];\n       byGrade(students);\n       // {\n       //   'A': [{name: 'Dianne', score: 99}],\n       //   'B': [{name: 'Abby', score: 84}]\n       //   // ...,\n       //   'F': [{name: 'Eddy', score: 58}]\n       // }\n "
  },
  "groupWith": {
    "prefix": "RgroupWith",
    "body": [
      "R.groupWith($Function, $Array)"
    ],
    "description": "\n  Takes a list and returns a list of lists where each sublist's elements are\n  all satisfied pairwise comparison according to the provided function.\n  Only adjacent elements are passed to the comparison function.\n \n  @func\n  @memberOf R\n  @since v0.21.0\n  @category List\n  @sig ((a, a) → Boolean) → [a] → [[a]]\n  @param {Function} fn Function for determining whether two given (adjacent)\n         elements should be in the same group\n  @param {Array} list The array to group. Also accepts a string, which will be\n         treated as a list of characters.\n  @return {List} A list that contains sublists of elements,\n          whose concatenations are equal to the original list.\n  @example\n \n  R.groupWith(R.equals, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n  //=> [[0], [1, 1], [2], [3], [5], [8], [13], [21]]\n \n  R.groupWith((a, b) => a + 1 === b, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n  //=> [[0, 1], [1, 2, 3], [5], [8], [13], [21]]\n \n  R.groupWith((a, b) => a % 2 === b % 2, [0, 1, 1, 2, 3, 5, 8, 13, 21])\n  //=> [[0], [1, 1], [2], [3, 5], [8], [13, 21]]\n \n  R.groupWith(R.eqBy(isVowel), 'aestiou')\n  //=> ['ae', 'st', 'iou']\n "
  },
  "gt": {
    "prefix": "Rgt",
    "body": [
      "R.gt($[any], $[any])"
    ],
    "description": "\n  Returns `true` if the first argument is greater than the second; `false`\n  otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord a => a -> a -> Boolean\n  @param {} a\n  @param {} b\n  @return {Boolean}\n  @see R.lt\n  @example\n \n       R.gt(2, 1); //=> true\n       R.gt(2, 2); //=> false\n       R.gt(2, 3); //=> false\n       R.gt('a', 'z'); //=> false\n       R.gt('z', 'a'); //=> true\n "
  },
  "gte": {
    "prefix": "Rgte",
    "body": [
      "R.gte($Number, $Number)"
    ],
    "description": "\n  Returns `true` if the first argument is greater than or equal to the second;\n  `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord a => a -> a -> Boolean\n  @param {Number} a\n  @param {Number} b\n  @return {Boolean}\n  @see R.lte\n  @example\n \n       R.gte(2, 1); //=> true\n       R.gte(2, 2); //=> true\n       R.gte(2, 3); //=> false\n       R.gte('a', 'z'); //=> false\n       R.gte('z', 'a'); //=> true\n "
  },
  "has": {
    "prefix": "Rhas",
    "body": [
      "R.has($String, $Object)"
    ],
    "description": "\n  Returns whether or not an object has an own property with the specified name\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category Object\n  @sig s -> {s: x} -> Boolean\n  @param {String} prop The name of the property to check for.\n  @param {Object} obj The object to query.\n  @return {Boolean} Whether the property exists.\n  @example\n \n       var hasName = R.has('name');\n       hasName({name: 'alice'});   //=> true\n       hasName({name: 'bob'});     //=> true\n       hasName({});                //=> false\n \n       var point = {x: 0, y: 0};\n       var pointHas = R.has(R.__, point);\n       pointHas('x');  //=> true\n       pointHas('y');  //=> true\n       pointHas('z');  //=> false\n "
  },
  "hasIn": {
    "prefix": "RhasIn",
    "body": [
      "R.hasIn($String, $Object)"
    ],
    "description": "\n  Returns whether or not an object or its prototype chain has a property with\n  the specified name\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category Object\n  @sig s -> {s: x} -> Boolean\n  @param {String} prop The name of the property to check for.\n  @param {Object} obj The object to query.\n  @return {Boolean} Whether the property exists.\n  @example\n \n       function Rectangle(width, height) {\n         this.width = width;\n         this.height = height;\n       }\n       Rectangle.prototype.area = function() {\n         return this.width  this.height;\n       };\n \n       var square = new Rectangle(2, 2);\n       R.hasIn('width', square);  //=> true\n       R.hasIn('area', square);  //=> true\n "
  },
  "head": {
    "prefix": "Rhead",
    "body": [
      "R.head($Array|String)"
    ],
    "description": "\n  Returns the first element of the given list or string. In some libraries\n  this function is named `first`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> a | Undefined\n  @sig String -> String\n  @param {Array|String} list\n  @return {}\n  @see R.tail, R.init, R.last\n  @example\n \n       R.head(['fi', 'fo', 'fum']); //=> 'fi'\n       R.head([]); //=> undefined\n \n       R.head('abc'); //=> 'a'\n       R.head(''); //=> ''\n "
  },
  "identical": {
    "prefix": "Ridentical",
    "body": [
      "R.identical($[any], $[any])"
    ],
    "description": "\n  Returns true if its arguments are identical, false otherwise. Values are\n  identical if they reference the same memory. `NaN` is identical to `NaN`;\n  `0` and `-0` are not identical.\n \n  @func\n  @memberOf R\n  @since v0.15.0\n  @category Relation\n  @sig a -> a -> Boolean\n  @param {} a\n  @param {} b\n  @return {Boolean}\n  @example\n \n       var o = {};\n       R.identical(o, o); //=> true\n       R.identical(1, 1); //=> true\n       R.identical(1, '1'); //=> false\n       R.identical([], []); //=> false\n       R.identical(0, -0); //=> false\n       R.identical(NaN, NaN); //=> true\n "
  },
  "identity": {
    "prefix": "Ridentity",
    "body": [
      "R.identity($[any])"
    ],
    "description": "\n  A function that does nothing but return the parameter supplied to it. Good\n  as a default or placeholder function.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig a -> a\n  @param {} x The value to return.\n  @return {} The input value, `x`.\n  @example\n \n       R.identity(1); //=> 1\n \n       var obj = {};\n       R.identity(obj) === obj; //=> true\n  @symb R.identity(a) = a\n "
  },
  "ifElse": {
    "prefix": "RifElse",
    "body": [
      "R.ifElse($Function, $Function, $Function)"
    ],
    "description": "\n  Creates a function that will process either the `onTrue` or the `onFalse`\n  function depending upon the result of the `condition` predicate.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Logic\n  @sig (... -> Boolean) -> (... -> ) -> (... -> ) -> (... -> )\n  @param {Function} condition A predicate function\n  @param {Function} onTrue A function to invoke when the `condition` evaluates to a truthy value.\n  @param {Function} onFalse A function to invoke when the `condition` evaluates to a falsy value.\n  @return {Function} A new unary function that will process either the `onTrue` or the `onFalse`\n                     function depending upon the result of the `condition` predicate.\n  @see R.unless, R.when\n  @example\n \n       var incCount = R.ifElse(\n         R.has('count'),\n         R.over(R.lensProp('count'), R.inc),\n         R.assoc('count', 1)\n       );\n       incCount({});           //=> { count: 1 }\n       incCount({ count: 1 }); //=> { count: 2 }\n "
  },
  "inc": {
    "prefix": "Rinc",
    "body": [
      "R.inc($Number)"
    ],
    "description": "\n  Increments its argument.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Math\n  @sig Number -> Number\n  @param {Number} n\n  @return {Number} n + 1\n  @see R.dec\n  @example\n \n       R.inc(42); //=> 43\n "
  },
  "index": {
    "prefix": "Rindex",
    "body": [
      "R.index()"
    ],
    "description": "module.exports = {};\nmodule.exports.F = /#__PURE__"
  },
  "indexBy": {
    "prefix": "RindexBy",
    "body": [
      "R.indexBy($Function, $Array)"
    ],
    "description": "\n  Given a function that generates a key, turns a list of objects into an\n  object indexing the objects by the given key. Note that if multiple\n  objects generate the same value for the indexing key only the last value\n  will be included in the generated object.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig (a -> String) -> [{k: v}] -> {k: {k: v}}\n  @param {Function} fn Function :: a -> String\n  @param {Array} array The array of objects to index\n  @return {Object} An object indexing each array element by the given property.\n  @example\n \n       var list = [{id: 'xyz', title: 'A'}, {id: 'abc', title: 'B'}];\n       R.indexBy(R.prop('id'), list);\n       //=> {abc: {id: 'abc', title: 'B'}, xyz: {id: 'xyz', title: 'A'}}\n "
  },
  "indexOf": {
    "prefix": "RindexOf",
    "body": [
      "R.indexOf($[any], $Array)"
    ],
    "description": "\n  Returns the position of the first occurrence of an item in an array, or -1\n  if the item is not included in the array. [`R.equals`](#equals) is used to\n  determine equality.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig a -> [a] -> Number\n  @param {} target The item to find.\n  @param {Array} xs The array to search in.\n  @return {Number} the index of the target, or -1 if the target is not found.\n  @see R.lastIndexOf\n  @example\n \n       R.indexOf(3, [1,2,3,4]); //=> 2\n       R.indexOf(10, [1,2,3,4]); //=> -1\n "
  },
  "init": {
    "prefix": "Rinit",
    "body": [
      "R.init($[any])"
    ],
    "description": "\n  Returns all but the last element of the given list or string.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category List\n  @sig [a] -> [a]\n  @sig String -> String\n  @param {} list\n  @return {}\n  @see R.last, R.head, R.tail\n  @example\n \n       R.init([1, 2, 3]);  //=> [1, 2]\n       R.init([1, 2]);     //=> [1]\n       R.init([1]);        //=> []\n       R.init([]);         //=> []\n \n       R.init('abc');  //=> 'ab'\n       R.init('ab');   //=> 'a'\n       R.init('a');    //=> ''\n       R.init('');     //=> ''\n "
  },
  "innerJoin": {
    "prefix": "RinnerJoin",
    "body": [
      "R.innerJoin($Function, $Array, $Array)"
    ],
    "description": "\n  Takes a predicate `pred`, a list `xs`, and a list `ys`, and returns a list\n  `xs'` comprising each of the elements of `xs` which is equal to one or more\n  elements of `ys` according to `pred`.\n \n  `pred` must be a binary function expecting an element from each list.\n \n  `xs`, `ys`, and `xs'` are treated as sets, semantically, so ordering should\n  not be significant, but since `xs'` is ordered the implementation guarantees\n  that its values are in the same order as they appear in `xs`. Duplicates are\n  not removed, so `xs'` may contain duplicates if `xs` contains duplicates.\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Relation\n  @sig ((a, b) -> Boolean) -> [a] -> [b] -> [a]\n  @param {Function} pred\n  @param {Array} xs\n  @param {Array} ys\n  @return {Array}\n  @see R.intersection\n  @example\n \n       R.innerJoin(\n         (record, id) => record.id === id,\n         [{id: 824, name: 'Richie Furay'},\n          {id: 956, name: 'Dewey Martin'},\n          {id: 313, name: 'Bruce Palmer'},\n          {id: 456, name: 'Stephen Stills'},\n          {id: 177, name: 'Neil Young'}],\n         [177, 456, 999]\n       );\n       //=> [{id: 456, name: 'Stephen Stills'}, {id: 177, name: 'Neil Young'}]\n "
  },
  "insert": {
    "prefix": "Rinsert",
    "body": [
      "R.insert($Number, $[any], $Array)"
    ],
    "description": "\n  Inserts the supplied element into the list, at the specified `index`. _Note that\n\n  this is not destructive_: it returns a copy of the list with the changes.\n  <small>No lists have been harmed in the application of this function.</small>\n \n  @func\n  @memberOf R\n  @since v0.2.2\n  @category List\n  @sig Number -> a -> [a] -> [a]\n  @param {Number} index The position to insert the element\n  @param {} elt The element to insert into the Array\n  @param {Array} list The list to insert into\n  @return {Array} A new Array with `elt` inserted at `index`.\n  @example\n \n       R.insert(2, 'x', [1,2,3,4]); //=> [1,2,'x',3,4]\n "
  },
  "insertAll": {
    "prefix": "RinsertAll",
    "body": [
      "R.insertAll($Number, $Array, $Array)"
    ],
    "description": "\n  Inserts the sub-list into the list, at the specified `index`. _Note that this is not\n  destructive_: it returns a copy of the list with the changes.\n  <small>No lists have been harmed in the application of this function.</small>\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category List\n  @sig Number -> [a] -> [a] -> [a]\n  @param {Number} index The position to insert the sub-list\n  @param {Array} elts The sub-list to insert into the Array\n  @param {Array} list The list to insert the sub-list into\n  @return {Array} A new Array with `elts` inserted starting at `index`.\n  @example\n \n       R.insertAll(2, ['x','y','z'], [1,2,3,4]); //=> [1,2,'x','y','z',3,4]\n "
  },
  "intersection": {
    "prefix": "Rintersection",
    "body": [
      "R.intersection($Array, $Array)"
    ],
    "description": "\n  Combines two lists into a set (i.e. no duplicates) composed of those\n  elements common to both lists.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig [] -> [] -> []\n  @param {Array} list1 The first list.\n  @param {Array} list2 The second list.\n  @return {Array} The list of elements found in both `list1` and `list2`.\n  @see R.innerJoin\n  @example\n \n       R.intersection([1,2,3,4], [7,6,5,4,3]); //=> [4, 3]\n "
  },
  "intersperse": {
    "prefix": "Rintersperse",
    "body": [
      "R.intersperse($[any], $Array)"
    ],
    "description": "\n  Creates a new list with the separator interposed between elements.\n \n  Dispatches to the `intersperse` method of the second argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category List\n  @sig a -> [a] -> [a]\n  @param {} separator The element to add to the list.\n  @param {Array} list The list to be interposed.\n  @return {Array} The new list.\n  @example\n \n       R.intersperse('n', ['ba', 'a', 'a']); //=> ['ba', 'n', 'a', 'n', 'a']\n "
  },
  "into": {
    "prefix": "Rinto",
    "body": [
      "R.into($[any], $Function, $Array)"
    ],
    "description": "\n  Transforms the items of the list with the transducer and appends the\n  transformed items to the accumulator using an appropriate iterator function\n  based on the accumulator type.\n \n  The accumulator can be an array, string, object or a transformer. Iterated\n  items will be appended to arrays and concatenated to strings. Objects will\n  be merged directly or 2-item arrays will be merged as key, value pairs.\n \n  The accumulator can also be a transformer object that provides a 2-arity\n  reducing iterator function, step, 0-arity initial value function, init, and\n  1-arity result extraction function result. The step function is used as the\n  iterator function in reduce. The result function is used to convert the\n  final accumulator into the return type and in most cases is R.identity. The\n  init function is used to provide the initial accumulator.\n \n  The iteration is performed with [`R.reduce`](#reduce) after initializing the\n  transducer.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category List\n  @sig a -> (b -> b) -> [c] -> a\n  @param {} acc The initial accumulator value.\n  @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @example\n \n       var numbers = [1, 2, 3, 4];\n       var transducer = R.compose(R.map(R.add(1)), R.take(2));\n \n       R.into([], transducer, numbers); //=> [2, 3]\n \n       var intoArray = R.into([]);\n       intoArray(transducer, numbers); //=> [2, 3]\n "
  },
  "invert": {
    "prefix": "Rinvert",
    "body": [
      "R.invert($Object)"
    ],
    "description": "\n  Same as [`R.invertObj`](#invertObj), however this accounts for objects with\n  duplicate values by putting the values into an array.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Object\n  @sig {s: x} -> {x: [ s, ... ]}\n  @param {Object} obj The object or array to invert\n  @return {Object} out A new object with keys in an array.\n  @see R.invertObj\n  @example\n \n       var raceResultsByFirstName = {\n         first: 'alice',\n         second: 'jake',\n         third: 'alice',\n       };\n       R.invert(raceResultsByFirstName);\n       //=> { 'alice': ['first', 'third'], 'jake':['second'] }\n "
  },
  "invertObj": {
    "prefix": "RinvertObj",
    "body": [
      "R.invertObj($Object)"
    ],
    "description": "\n  Returns a new object with the keys of the given object as values, and the\n  values of the given object, which are coerced to strings, as keys. Note\n  that the last key found is preferred when handling the same value.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Object\n  @sig {s: x} -> {x: s}\n  @param {Object} obj The object or array to invert\n  @return {Object} out A new object\n  @see R.invert\n  @example\n \n       var raceResults = {\n         first: 'alice',\n         second: 'jake'\n       };\n       R.invertObj(raceResults);\n       //=> { 'alice': 'first', 'jake':'second' }\n \n       // Alternatively:\n       var raceResults = ['alice', 'jake'];\n       R.invertObj(raceResults);\n       //=> { 'alice': '0', 'jake':'1' }\n "
  },
  "invoker": {
    "prefix": "Rinvoker",
    "body": [
      "R.invoker($Number, $String)"
    ],
    "description": "\n  Turns a named method with a specified arity into a function that can be\n  called directly supplied with arguments and a target object.\n \n  The returned function is curried and accepts `arity + 1` parameters where\n  the final parameter is the target object.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig Number -> String -> (a -> b -> ... -> n -> Object -> )\n  @param {Number} arity Number of arguments the returned function should take\n         before the target object.\n  @param {String} method Name of the method to call.\n  @return {Function} A new curried function.\n  @see R.construct\n  @example\n \n       var sliceFrom = R.invoker(1, 'slice');\n       sliceFrom(6, 'abcdefghijklm'); //=> 'ghijklm'\n       var sliceFrom6 = R.invoker(2, 'slice')(6);\n       sliceFrom6(8, 'abcdefghijklm'); //=> 'gh'\n  @symb R.invoker(0, 'method')(o) = o['method']()\n  @symb R.invoker(1, 'method')(a, o) = o['method'](a)\n  @symb R.invoker(2, 'method')(a, b, o) = o['method'](a, b)\n "
  },
  "is": {
    "prefix": "Ris",
    "body": [
      "R.is($Object, $[any])"
    ],
    "description": "\n  See if an object (`val`) is an instance of the supplied constructor. This\n  function will check up the inheritance chain, if any.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category Type\n  @sig ( -> {}) -> a -> Boolean\n  @param {Object} ctor A constructor\n  @param {} val The value to test\n  @return {Boolean}\n  @example\n \n       R.is(Object, {}); //=> true\n       R.is(Number, 1); //=> true\n       R.is(Object, 1); //=> false\n       R.is(String, 's'); //=> true\n       R.is(String, new String('')); //=> true\n       R.is(Object, new String('')); //=> true\n       R.is(Object, 's'); //=> false\n       R.is(Number, {}); //=> false\n "
  },
  "isEmpty": {
    "prefix": "RisEmpty",
    "body": [
      "R.isEmpty($[any])"
    ],
    "description": "\n  Returns `true` if the given value is its type's empty value; `false`\n  otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Logic\n  @sig a -> Boolean\n  @param {} x\n  @return {Boolean}\n  @see R.empty\n  @example\n \n       R.isEmpty([1, 2, 3]);   //=> false\n       R.isEmpty([]);          //=> true\n       R.isEmpty('');          //=> true\n       R.isEmpty(null);        //=> false\n       R.isEmpty({});          //=> true\n       R.isEmpty({length: 0}); //=> false\n "
  },
  "isNil": {
    "prefix": "RisNil",
    "body": [
      "R.isNil($[any])"
    ],
    "description": "\n  Checks if the input value is `null` or `undefined`.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Type\n  @sig  -> Boolean\n  @param {} x The value to test.\n  @return {Boolean} `true` if `x` is `undefined` or `null`, otherwise `false`.\n  @example\n \n       R.isNil(null); //=> true\n       R.isNil(undefined); //=> true\n       R.isNil(0); //=> false\n       R.isNil([]); //=> false\n "
  },
  "join": {
    "prefix": "Rjoin",
    "body": [
      "R.join($Number|String, $Array)"
    ],
    "description": "\n  Returns a string made by inserting the `separator` between each element and\n  concatenating all the elements into a single string.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig String -> [a] -> String\n  @param {Number|String} separator The string used to separate the elements.\n  @param {Array} xs The elements to join into a string.\n  @return {String} str The string made by concatenating `xs` with `separator`.\n  @see R.split\n  @example\n \n       var spacer = R.join(' ');\n       spacer(['a', 2, 3.4]);   //=> 'a 2 3.4'\n       R.join('|', [1, 2, 3]);    //=> '1|2|3'\n "
  },
  "juxt": {
    "prefix": "Rjuxt",
    "body": [
      "R.juxt($Array)"
    ],
    "description": "\n  juxt applies a list of functions to a list of values.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Function\n  @sig [(a, b, ..., m) -> n] -> ((a, b, ..., m) -> [n])\n  @param {Array} fns An array of functions\n  @return {Function} A function that returns a list of values after applying each of the original `fns` to its parameters.\n  @see R.applySpec\n  @example\n \n       var getRange = R.juxt([Math.min, Math.max]);\n       getRange(3, 4, 9, -3); //=> [-3, 9]\n  @symb R.juxt([f, g, h])(a, b) = [f(a, b), g(a, b), h(a, b)]\n "
  },
  "keys": {
    "prefix": "Rkeys",
    "body": [
      "R.keys($Object)"
    ],
    "description": "\n  Returns a list containing the names of all the enumerable own properties of\n  the supplied object.\n  Note that the order of the output array is not guaranteed to be consistent\n  across different JS platforms.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig {k: v} -> [k]\n  @param {Object} obj The object to extract properties from\n  @return {Array} An array of the object's own properties.\n  @see R.keysIn, R.values\n  @example\n \n       R.keys({a: 1, b: 2, c: 3}); //=> ['a', 'b', 'c']\n "
  },
  "keysIn": {
    "prefix": "RkeysIn",
    "body": [
      "R.keysIn($Object)"
    ],
    "description": "\n  Returns a list containing the names of all the properties of the supplied\n  object, including prototype properties.\n  Note that the order of the output array is not guaranteed to be consistent\n  across different JS platforms.\n \n  @func\n  @memberOf R\n  @since v0.2.0\n  @category Object\n  @sig {k: v} -> [k]\n  @param {Object} obj The object to extract properties from\n  @return {Array} An array of the object's own and prototype properties.\n  @see R.keys, R.valuesIn\n  @example\n \n       var F = function() { this.x = 'X'; };\n       F.prototype.y = 'Y';\n       var f = new F();\n       R.keysIn(f); //=> ['x', 'y']\n "
  },
  "last": {
    "prefix": "Rlast",
    "body": [
      "R.last($[any])"
    ],
    "description": "\n  Returns the last element of the given list or string.\n \n  @func\n  @memberOf R\n  @since v0.1.4\n  @category List\n  @sig [a] -> a | Undefined\n  @sig String -> String\n  @param {} list\n  @return {}\n  @see R.init, R.head, R.tail\n  @example\n \n       R.last(['fi', 'fo', 'fum']); //=> 'fum'\n       R.last([]); //=> undefined\n \n       R.last('abc'); //=> 'c'\n       R.last(''); //=> ''\n "
  },
  "lastIndexOf": {
    "prefix": "RlastIndexOf",
    "body": [
      "R.lastIndexOf($[any], $Array)"
    ],
    "description": "\n  Returns the position of the last occurrence of an item in an array, or -1 if\n  the item is not included in the array. [`R.equals`](#equals) is used to\n  determine equality.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig a -> [a] -> Number\n  @param {} target The item to find.\n  @param {Array} xs The array to search in.\n  @return {Number} the index of the target, or -1 if the target is not found.\n  @see R.indexOf\n  @example\n \n       R.lastIndexOf(3, [-1,3,3,0,1,2,3,4]); //=> 6\n       R.lastIndexOf(10, [1,2,3,4]); //=> -1\n "
  },
  "length": {
    "prefix": "Rlength",
    "body": [
      "R.length($Array)"
    ],
    "description": "\n  Returns the number of elements in the array by returning `list.length`.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category List\n  @sig [a] -> Number\n  @param {Array} list The array to inspect.\n  @return {Number} The length of the array.\n  @example\n \n       R.length([]); //=> 0\n       R.length([1, 2, 3]); //=> 3\n "
  },
  "lens": {
    "prefix": "Rlens",
    "body": [
      "R.lens($Function, $Function)"
    ],
    "description": "\n  Returns a lens for the given getter and setter functions. The getter \"gets\"\n  the value of the focus; the setter \"sets\" the value of the focus. The setter\n  should not mutate the data structure.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Object\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig (s -> a) -> ((a, s) -> s) -> Lens s a\n  @param {Function} getter\n  @param {Function} setter\n  @return {Lens}\n  @see R.view, R.set, R.over, R.lensIndex, R.lensProp\n  @example\n \n       var xLens = R.lens(R.prop('x'), R.assoc('x'));\n \n       R.view(xLens, {x: 1, y: 2});            //=> 1\n       R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n       R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n "
  },
  "lensIndex": {
    "prefix": "RlensIndex",
    "body": [
      "R.lensIndex($Number)"
    ],
    "description": "\n  Returns a lens whose focus is the specified index.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category Object\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig Number -> Lens s a\n  @param {Number} n\n  @return {Lens}\n  @see R.view, R.set, R.over\n  @example\n \n       var headLens = R.lensIndex(0);\n \n       R.view(headLens, ['a', 'b', 'c']);            //=> 'a'\n       R.set(headLens, 'x', ['a', 'b', 'c']);        //=> ['x', 'b', 'c']\n       R.over(headLens, R.toUpper, ['a', 'b', 'c']); //=> ['A', 'b', 'c']\n "
  },
  "lensPath": {
    "prefix": "RlensPath",
    "body": [
      "R.lensPath($Array)"
    ],
    "description": "\n  Returns a lens whose focus is the specified path.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Object\n  @typedefn Idx = String | Int\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig [Idx] -> Lens s a\n  @param {Array} path The path to use.\n  @return {Lens}\n  @see R.view, R.set, R.over\n  @example\n \n       var xHeadYLens = R.lensPath(['x', 0, 'y']);\n \n       R.view(xHeadYLens, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n       //=> 2\n       R.set(xHeadYLens, 1, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n       //=> {x: [{y: 1, z: 3}, {y: 4, z: 5}]}\n       R.over(xHeadYLens, R.negate, {x: [{y: 2, z: 3}, {y: 4, z: 5}]});\n       //=> {x: [{y: -2, z: 3}, {y: 4, z: 5}]}\n "
  },
  "lensProp": {
    "prefix": "RlensProp",
    "body": [
      "R.lensProp($String)"
    ],
    "description": "\n  Returns a lens whose focus is the specified property.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category Object\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig String -> Lens s a\n  @param {String} k\n  @return {Lens}\n  @see R.view, R.set, R.over\n  @example\n \n       var xLens = R.lensProp('x');\n \n       R.view(xLens, {x: 1, y: 2});            //=> 1\n       R.set(xLens, 4, {x: 1, y: 2});          //=> {x: 4, y: 2}\n       R.over(xLens, R.negate, {x: 1, y: 2});  //=> {x: -1, y: 2}\n "
  },
  "lift": {
    "prefix": "Rlift",
    "body": [
      "R.lift($Function)"
    ],
    "description": "\n  \"lifts\" a function of arity > 1 so that it may \"map over\" a list, Function or other\n  object that satisfies the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category Function\n  @sig (... -> ) -> ([]... -> [])\n  @param {Function} fn The function to lift into higher context\n  @return {Function} The lifted function.\n  @see R.liftN\n  @example\n \n       var madd3 = R.lift((a, b, c) => a + b + c);\n \n       madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n \n       var madd5 = R.lift((a, b, c, d, e) => a + b + c + d + e);\n \n       madd5([1,2], [3], [4, 5], [6], [7, 8]); //=> [21, 22, 22, 23, 22, 23, 23, 24]\n "
  },
  "liftN": {
    "prefix": "RliftN",
    "body": [
      "R.liftN($Function)"
    ],
    "description": "\n  \"lifts\" a function to be the specified arity, so that it may \"map over\" that\n  many lists, Functions or other objects that satisfy the [FantasyLand Apply spec](https://github.com/fantasyland/fantasy-land#apply).\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category Function\n  @sig Number -> (... -> ) -> ([]... -> [])\n  @param {Function} fn The function to lift into higher context\n  @return {Function} The lifted function.\n  @see R.lift, R.ap\n  @example\n \n       var madd3 = R.liftN(3, (...args) => R.sum(args));\n       madd3([1,2,3], [1,2,3], [1]); //=> [3, 4, 5, 4, 5, 6, 5, 6, 7]\n "
  },
  "lt": {
    "prefix": "Rlt",
    "body": [
      "R.lt($[any], $[any])"
    ],
    "description": "\n  Returns `true` if the first argument is less than the second; `false`\n  otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord a => a -> a -> Boolean\n  @param {} a\n  @param {} b\n  @return {Boolean}\n  @see R.gt\n  @example\n \n       R.lt(2, 1); //=> false\n       R.lt(2, 2); //=> false\n       R.lt(2, 3); //=> true\n       R.lt('a', 'z'); //=> true\n       R.lt('z', 'a'); //=> false\n "
  },
  "lte": {
    "prefix": "Rlte",
    "body": [
      "R.lte($Number, $Number)"
    ],
    "description": "\n  Returns `true` if the first argument is less than or equal to the second;\n  `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord a => a -> a -> Boolean\n  @param {Number} a\n  @param {Number} b\n  @return {Boolean}\n  @see R.gte\n  @example\n \n       R.lte(2, 1); //=> false\n       R.lte(2, 2); //=> true\n       R.lte(2, 3); //=> true\n       R.lte('a', 'z'); //=> true\n       R.lte('z', 'a'); //=> false\n "
  },
  "map": {
    "prefix": "Rmap",
    "body": [
      "R.map($Function, $Array)"
    ],
    "description": "\n  Takes a function and\n  a [functor](https://github.com/fantasyland/fantasy-land#functor),\n  applies the function to each of the functor's values, and returns\n  a functor of the same shape.\n \n  Ramda provides suitable `map` implementations for `Array` and `Object`,\n  so this function may be applied to `[1, 2, 3]` or `{x: 1, y: 2, z: 3}`.\n \n  Dispatches to the `map` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  Also treats functions as functors and will compose them together.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Functor f => (a -> b) -> f a -> f b\n  @param {Function} fn The function to be called on every element of the input `list`.\n  @param {Array} list The list to be iterated over.\n  @return {Array} The new list.\n  @see R.transduce, R.addIndex\n  @example\n \n       var double = x => x  2;\n \n       R.map(double, [1, 2, 3]); //=> [2, 4, 6]\n \n       R.map(double, {x: 1, y: 2, z: 3}); //=> {x: 2, y: 4, z: 6}\n  @symb R.map(f, [a, b]) = [f(a), f(b)]\n  @symb R.map(f, { x: a, y: b }) = { x: f(a), y: f(b) }\n  @symb R.map(f, functor_o) = functor_o.map(f)\n "
  },
  "mapAccum": {
    "prefix": "RmapAccum",
    "body": [
      "R.mapAccum($Function, $[any], $Array)"
    ],
    "description": "\n  The `mapAccum` function behaves like a combination of map and reduce; it\n  applies a function to each element of a list, passing an accumulating\n  parameter from left to right, and returning a final value of this\n  accumulator together with the new list.\n \n  The iterator function receives two arguments, acc and value, and should\n  return a tuple [acc, value].\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category List\n  @sig ((acc, x) -> (acc, y)) -> acc -> [x] -> (acc, [y])\n  @param {Function} fn The function to be called on every element of the input `list`.\n  @param {} acc The accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @see R.addIndex, R.mapAccumRight\n  @example\n \n       var digits = ['1', '2', '3', '4'];\n       var appender = (a, b) => [a + b, a + b];\n \n       R.mapAccum(appender, 0, digits); //=> ['01234', ['01', '012', '0123', '01234']]\n  @symb R.mapAccum(f, a, [b, c, d]) = [\n    f(f(f(a, b)[0], c)[0], d)[0],\n    [\n      f(a, b)[1],\n      f(f(a, b)[0], c)[1],\n      f(f(f(a, b)[0], c)[0], d)[1]\n    ]\n  ]\n "
  },
  "mapAccumRight": {
    "prefix": "RmapAccumRight",
    "body": [
      "R.mapAccumRight($Function, $[any], $Array)"
    ],
    "description": "\n  The `mapAccumRight` function behaves like a combination of map and reduce; it\n  applies a function to each element of a list, passing an accumulating\n  parameter from right to left, and returning a final value of this\n  accumulator together with the new list.\n \n  Similar to [`mapAccum`](#mapAccum), except moves through the input list from\n  the right to the left.\n \n  The iterator function receives two arguments, value and acc, and should\n  return a tuple [value, acc].\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category List\n  @sig ((x, acc) -> (y, acc)) -> acc -> [x] -> ([y], acc)\n  @param {Function} fn The function to be called on every element of the input `list`.\n  @param {} acc The accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @see R.addIndex, R.mapAccum\n  @example\n \n       var digits = ['1', '2', '3', '4'];\n       var append = (a, b) => [a + b, a + b];\n \n       R.mapAccumRight(append, 5, digits); //=> [['12345', '2345', '345', '45'], '12345']\n  @symb R.mapAccumRight(f, a, [b, c, d]) = [\n    [\n      f(b, f(c, f(d, a)[0])[0])[1],\n      f(c, f(d, a)[0])[1],\n      f(d, a)[1],\n    ]\n    f(b, f(c, f(d, a)[0])[0])[0],\n  ]\n "
  },
  "mapObjIndexed": {
    "prefix": "RmapObjIndexed",
    "body": [
      "R.mapObjIndexed($Function, $Object)"
    ],
    "description": "\n  An Object-specific version of [`map`](#map). The function is applied to three\n  arguments: (value, key, obj). If only the value is significant, use\n  [`map`](#map) instead.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Object\n  @sig ((, String, Object) -> ) -> Object -> Object\n  @param {Function} fn\n  @param {Object} obj\n  @return {Object}\n  @see R.map\n  @example\n \n       var values = { x: 1, y: 2, z: 3 };\n       var prependKeyAndDouble = (num, key, obj) => key + (num  2);\n \n       R.mapObjIndexed(prependKeyAndDouble, values); //=> { x: 'x2', y: 'y4', z: 'z6' }\n "
  },
  "match": {
    "prefix": "Rmatch",
    "body": [
      "R.match($RegExp, $String)"
    ],
    "description": "\n  Tests a regular expression against a String. Note that this function will\n  return an empty array when there are no matches. This differs from\n  [`String.prototype.match`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/match)\n  which returns `null` when there are no matches.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category String\n  @sig RegExp -> String -> [String | Undefined]\n  @param {RegExp} rx A regular expression.\n  @param {String} str The string to match against\n  @return {Array} The list of matches or empty array.\n  @see R.test\n  @example\n \n       R.match(/([a-z]a)/g, 'bananas'); //=> ['ba', 'na', 'na']\n       R.match(/a/, 'b'); //=> []\n       R.match(/a/, null); //=> TypeError: null does not have a method named \"match\"\n "
  },
  "mathMod": {
    "prefix": "RmathMod",
    "body": [
      "R.mathMod($Number, $Number)"
    ],
    "description": "\n  `mathMod` behaves like the modulo operator should mathematically, unlike the\n  `%` operator (and by extension, [`R.modulo`](#modulo)). So while\n  `-17 % 5` is `-2`, `mathMod(-17, 5)` is `3`. `mathMod` requires Integer\n  arguments, and returns NaN when the modulus is zero or negative.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category Math\n  @sig Number -> Number -> Number\n  @param {Number} m The dividend.\n  @param {Number} p the modulus.\n  @return {Number} The result of `b mod a`.\n  @see R.modulo\n  @example\n \n       R.mathMod(-17, 5);  //=> 3\n       R.mathMod(17, 5);   //=> 2\n       R.mathMod(17, -5);  //=> NaN\n       R.mathMod(17, 0);   //=> NaN\n       R.mathMod(17.2, 5); //=> NaN\n       R.mathMod(17, 5.3); //=> NaN\n \n       var clock = R.mathMod(R.__, 12);\n       clock(15); //=> 3\n       clock(24); //=> 0\n \n       var seventeenMod = R.mathMod(17);\n       seventeenMod(3);  //=> 2\n       seventeenMod(4);  //=> 1\n       seventeenMod(10); //=> 7\n "
  },
  "max": {
    "prefix": "Rmax",
    "body": [
      "R.max($[any], $[any])"
    ],
    "description": "\n  Returns the larger of its two arguments.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord a => a -> a -> a\n  @param {} a\n  @param {} b\n  @return {}\n  @see R.maxBy, R.min\n  @example\n \n       R.max(789, 123); //=> 789\n       R.max('a', 'b'); //=> 'b'\n "
  },
  "maxBy": {
    "prefix": "RmaxBy",
    "body": [
      "R.maxBy($Function, $[any], $[any])"
    ],
    "description": "\n  Takes a function and two values, and returns whichever value produces the\n  larger result when passed to the provided function.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Relation\n  @sig Ord b => (a -> b) -> a -> a -> a\n  @param {Function} f\n  @param {} a\n  @param {} b\n  @return {}\n  @see R.max, R.minBy\n  @example\n \n       //  square :: Number -> Number\n       var square = n => n  n;\n \n       R.maxBy(square, -3, 2); //=> -3\n \n       R.reduce(R.maxBy(square), 0, [3, -5, 4, 1, -2]); //=> -5\n       R.reduce(R.maxBy(square), 0, []); //=> 0\n "
  },
  "mean": {
    "prefix": "Rmean",
    "body": [
      "R.mean($Array)"
    ],
    "description": "\n  Returns the mean of the given list of numbers.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category Math\n  @sig [Number] -> Number\n  @param {Array} list\n  @return {Number}\n  @see R.median\n  @example\n \n       R.mean([2, 7, 9]); //=> 6\n       R.mean([]); //=> NaN\n "
  },
  "median": {
    "prefix": "Rmedian",
    "body": [
      "R.median($Array)"
    ],
    "description": "\n  Returns the median of the given list of numbers.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category Math\n  @sig [Number] -> Number\n  @param {Array} list\n  @return {Number}\n  @see R.mean\n  @example\n \n       R.median([2, 9, 7]); //=> 7\n       R.median([7, 2, 10, 9]); //=> 8\n       R.median([]); //=> NaN\n "
  },
  "memoize": {
    "prefix": "Rmemoize",
    "body": [
      "R.memoize($Function)"
    ],
    "description": "\n  Creates a new function that, when invoked, caches the result of calling `fn`\n  for a given argument set and returns the result. Subsequent calls to the\n  memoized `fn` with the same argument set will not result in an additional\n  call to `fn`; instead, the cached result for that set of arguments will be\n  returned.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig (... -> a) -> (... -> a)\n  @param {Function} fn The function to memoize.\n  @return {Function} Memoized version of `fn`.\n  @see R.memoizeWith\n  @deprecated since v0.25.0\n  @example\n \n       let count = 0;\n       const factorial = R.memoize(n => {\n         count += 1;\n         return R.product(R.range(1, n + 1));\n       });\n       factorial(5); //=> 120\n       factorial(5); //=> 120\n       factorial(5); //=> 120\n       count; //=> 1\n "
  },
  "memoizeWith": {
    "prefix": "RmemoizeWith",
    "body": [
      "R.memoizeWith($Function, $Function)"
    ],
    "description": "\n  A customisable version of [`R.memoize`](#memoize). `memoizeWith` takes an\n  additional function that will be applied to a given argument set and used to\n  create the cache key under which the results of the function to be memoized\n  will be stored. Care must be taken when implementing key generation to avoid\n  clashes that may overwrite previous entries erroneously.\n \n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Function\n  @sig (... -> String) -> (... -> a) -> (... -> a)\n  @param {Function} fn The function to generate the cache key.\n  @param {Function} fn The function to memoize.\n  @return {Function} Memoized version of `fn`.\n  @see R.memoize\n  @example\n \n       let count = 0;\n       const factorial = R.memoizeWith(R.identity, n => {\n         count += 1;\n         return R.product(R.range(1, n + 1));\n       });\n       factorial(5); //=> 120\n       factorial(5); //=> 120\n       factorial(5); //=> 120\n       count; //=> 1\n "
  },
  "merge": {
    "prefix": "Rmerge",
    "body": [
      "R.merge($Object, $Object)"
    ],
    "description": "\n  Create a new object with the own properties of the first object merged with\n  the own properties of the second object. If a key exists in both objects,\n  the value from the second object will be used.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig {k: v} -> {k: v} -> {k: v}\n  @param {Object} l\n  @param {Object} r\n  @return {Object}\n  @see R.mergeDeepRight, R.mergeWith, R.mergeWithKey\n  @example\n \n       R.merge({ 'name': 'fred', 'age': 10 }, { 'age': 40 });\n       //=> { 'name': 'fred', 'age': 40 }\n \n       var resetToDefault = R.merge(R.__, {x: 0});\n       resetToDefault({x: 5, y: 2}); //=> {x: 0, y: 2}\n  @symb R.merge({ x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: 5, z: 3 }\n "
  },
  "mergeAll": {
    "prefix": "RmergeAll",
    "body": [
      "R.mergeAll($Array)"
    ],
    "description": "\n  Merges a list of objects together into one object.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category List\n  @sig [{k: v}] -> {k: v}\n  @param {Array} list An array of objects\n  @return {Object} A merged object.\n  @see R.reduce\n  @example\n \n       R.mergeAll([{foo:1},{bar:2},{baz:3}]); //=> {foo:1,bar:2,baz:3}\n       R.mergeAll([{foo:1},{foo:2},{bar:2}]); //=> {foo:2,bar:2}\n  @symb R.mergeAll([{ x: 1 }, { y: 2 }, { z: 3 }]) = { x: 1, y: 2, z: 3 }\n "
  },
  "mergeDeepLeft": {
    "prefix": "RmergeDeepLeft",
    "body": [
      "R.mergeDeepLeft($Object, $Object)"
    ],
    "description": "\n  Creates a new object with the own properties of the first object merged with\n  the own properties of the second object. If a key exists in both objects:\n  - and both values are objects, the two values will be recursively merged\n  - otherwise the value from the first object will be used.\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Object\n  @sig {a} -> {a} -> {a}\n  @param {Object} lObj\n  @param {Object} rObj\n  @return {Object}\n  @see R.merge, R.mergeDeepRight, R.mergeDeepWith, R.mergeDeepWithKey\n  @example\n \n       R.mergeDeepLeft({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n                       { age: 40, contact: { email: 'baa@example.com' }});\n       //=> { name: 'fred', age: 10, contact: { email: 'moo@example.com' }}\n "
  },
  "mergeDeepRight": {
    "prefix": "RmergeDeepRight",
    "body": [
      "R.mergeDeepRight($Object, $Object)"
    ],
    "description": "\n  Creates a new object with the own properties of the first object merged with\n  the own properties of the second object. If a key exists in both objects:\n  - and both values are objects, the two values will be recursively merged\n  - otherwise the value from the second object will be used.\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Object\n  @sig {a} -> {a} -> {a}\n  @param {Object} lObj\n  @param {Object} rObj\n  @return {Object}\n  @see R.merge, R.mergeDeepLeft, R.mergeDeepWith, R.mergeDeepWithKey\n  @example\n \n       R.mergeDeepRight({ name: 'fred', age: 10, contact: { email: 'moo@example.com' }},\n                        { age: 40, contact: { email: 'baa@example.com' }});\n       //=> { name: 'fred', age: 40, contact: { email: 'baa@example.com' }}\n "
  },
  "mergeDeepWith": {
    "prefix": "RmergeDeepWith",
    "body": [
      "R.mergeDeepWith($Function, $Object, $Object)"
    ],
    "description": "\n  Creates a new object with the own properties of the two provided objects.\n  If a key exists in both objects:\n  - and both associated values are also objects then the values will be\n    recursively merged.\n  - otherwise the provided function is applied to associated values using the\n    resulting value as the new value associated with the key.\n  If a key only exists in one object, the value will be associated with the key\n  of the resulting object.\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Object\n  @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n  @param {Function} fn\n  @param {Object} lObj\n  @param {Object} rObj\n  @return {Object}\n  @see R.mergeWith, R.mergeDeep, R.mergeDeepWithKey\n  @example\n \n       R.mergeDeepWith(R.concat,\n                       { a: true, c: { values: [10, 20] }},\n                       { b: true, c: { values: [15, 35] }});\n       //=> { a: true, b: true, c: { values: [10, 20, 15, 35] }}\n "
  },
  "mergeDeepWithKey": {
    "prefix": "RmergeDeepWithKey",
    "body": [
      "R.mergeDeepWithKey($Function, $Object, $Object)"
    ],
    "description": "\n  Creates a new object with the own properties of the two provided objects.\n  If a key exists in both objects:\n  - and both associated values are also objects then the values will be\n    recursively merged.\n  - otherwise the provided function is applied to the key and associated values\n    using the resulting value as the new value associated with the key.\n  If a key only exists in one object, the value will be associated with the key\n  of the resulting object.\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Object\n  @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n  @param {Function} fn\n  @param {Object} lObj\n  @param {Object} rObj\n  @return {Object}\n  @see R.mergeWithKey, R.mergeDeep, R.mergeDeepWith\n  @example\n \n       let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n       R.mergeDeepWithKey(concatValues,\n                          { a: true, c: { thing: 'foo', values: [10, 20] }},\n                          { b: true, c: { thing: 'bar', values: [15, 35] }});\n       //=> { a: true, b: true, c: { thing: 'bar', values: [10, 20, 15, 35] }}\n "
  },
  "mergeWith": {
    "prefix": "RmergeWith",
    "body": [
      "R.mergeWith($Function, $Object, $Object)"
    ],
    "description": "\n  Creates a new object with the own properties of the two provided objects. If\n  a key exists in both objects, the provided function is applied to the values\n  associated with the key in each object, with the result being used as the\n  value associated with the key in the returned object.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Object\n  @sig ((a, a) -> a) -> {a} -> {a} -> {a}\n  @param {Function} fn\n  @param {Object} l\n  @param {Object} r\n  @return {Object}\n  @see R.mergeDeepWith, R.merge, R.mergeWithKey\n  @example\n \n       R.mergeWith(R.concat,\n                   { a: true, values: [10, 20] },\n                   { b: true, values: [15, 35] });\n       //=> { a: true, b: true, values: [10, 20, 15, 35] }\n "
  },
  "mergeWithKey": {
    "prefix": "RmergeWithKey",
    "body": [
      "R.mergeWithKey($Function, $Object, $Object)"
    ],
    "description": "\n  Creates a new object with the own properties of the two provided objects. If\n  a key exists in both objects, the provided function is applied to the key\n  and the values associated with the key in each object, with the result being\n  used as the value associated with the key in the returned object.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Object\n  @sig ((String, a, a) -> a) -> {a} -> {a} -> {a}\n  @param {Function} fn\n  @param {Object} l\n  @param {Object} r\n  @return {Object}\n  @see R.mergeDeepWithKey, R.merge, R.mergeWith\n  @example\n \n       let concatValues = (k, l, r) => k == 'values' ? R.concat(l, r) : r\n       R.mergeWithKey(concatValues,\n                      { a: true, thing: 'foo', values: [10, 20] },\n                      { b: true, thing: 'bar', values: [15, 35] });\n       //=> { a: true, b: true, thing: 'bar', values: [10, 20, 15, 35] }\n  @symb R.mergeWithKey(f, { x: 1, y: 2 }, { y: 5, z: 3 }) = { x: 1, y: f('y', 2, 5), z: 3 }\n "
  },
  "min": {
    "prefix": "Rmin",
    "body": [
      "R.min($[any], $[any])"
    ],
    "description": "\n  Returns the smaller of its two arguments.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord a => a -> a -> a\n  @param {} a\n  @param {} b\n  @return {}\n  @see R.minBy, R.max\n  @example\n \n       R.min(789, 123); //=> 123\n       R.min('a', 'b'); //=> 'a'\n "
  },
  "minBy": {
    "prefix": "RminBy",
    "body": [
      "R.minBy($Function, $[any], $[any])"
    ],
    "description": "\n  Takes a function and two values, and returns whichever value produces the\n  smaller result when passed to the provided function.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Relation\n  @sig Ord b => (a -> b) -> a -> a -> a\n  @param {Function} f\n  @param {} a\n  @param {} b\n  @return {}\n  @see R.min, R.maxBy\n  @example\n \n       //  square :: Number -> Number\n       var square = n => n  n;\n \n       R.minBy(square, -3, 2); //=> 2\n \n       R.reduce(R.minBy(square), Infinity, [3, -5, 4, 1, -2]); //=> 1\n       R.reduce(R.minBy(square), Infinity, []); //=> Infinity\n "
  },
  "modulo": {
    "prefix": "Rmodulo",
    "body": [
      "R.modulo($Number, $Number)"
    ],
    "description": "\n  Divides the first parameter by the second and returns the remainder. Note\n  that this function preserves the JavaScript-style behavior for modulo. For\n  mathematical modulo see [`mathMod`](#mathMod).\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category Math\n  @sig Number -> Number -> Number\n  @param {Number} a The value to the divide.\n  @param {Number} b The pseudo-modulus\n  @return {Number} The result of `b % a`.\n  @see R.mathMod\n  @example\n \n       R.modulo(17, 3); //=> 2\n       // JS behavior:\n       R.modulo(-17, 3); //=> -2\n       R.modulo(17, -3); //=> 2\n \n       var isOdd = R.modulo(R.__, 2);\n       isOdd(42); //=> 0\n       isOdd(21); //=> 1\n "
  },
  "multiply": {
    "prefix": "Rmultiply",
    "body": [
      "R.multiply($Number, $Number)"
    ],
    "description": "\n  Multiplies two numbers. Equivalent to `a  b` but curried.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Math\n  @sig Number -> Number -> Number\n  @param {Number} a The first value.\n  @param {Number} b The second value.\n  @return {Number} The result of `a  b`.\n  @see R.divide\n  @example\n \n       var double = R.multiply(2);\n       var triple = R.multiply(3);\n       double(3);       //=>  6\n       triple(4);       //=> 12\n       R.multiply(2, 5);  //=> 10\n "
  },
  "nAry": {
    "prefix": "RnAry",
    "body": [
      "R.nAry($Number, $Function)"
    ],
    "description": "\n  Wraps a function of any arity (including nullary) in a function that accepts\n  exactly `n` parameters. Any extraneous parameters will not be passed to the\n  supplied function.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig Number -> ( -> a) -> ( -> a)\n  @param {Number} n The desired arity of the new function.\n  @param {Function} fn The function to wrap.\n  @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n          arity `n`.\n  @see R.binary, R.unary\n  @example\n \n       var takesTwoArgs = (a, b) => [a, b];\n \n       takesTwoArgs.length; //=> 2\n       takesTwoArgs(1, 2); //=> [1, 2]\n \n       var takesOneArg = R.nAry(1, takesTwoArgs);\n       takesOneArg.length; //=> 1\n       // Only `n` arguments are passed to the wrapped function\n       takesOneArg(1, 2); //=> [1, undefined]\n  @symb R.nAry(0, f)(a, b) = f()\n  @symb R.nAry(1, f)(a, b) = f(a)\n  @symb R.nAry(2, f)(a, b) = f(a, b)\n "
  },
  "negate": {
    "prefix": "Rnegate",
    "body": [
      "R.negate($Number)"
    ],
    "description": "\n  Negates its argument.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Math\n  @sig Number -> Number\n  @param {Number} n\n  @return {Number}\n  @example\n \n       R.negate(42); //=> -42\n "
  },
  "none": {
    "prefix": "Rnone",
    "body": [
      "R.none($Function, $Array)"
    ],
    "description": "\n  Returns `true` if no elements of the list match the predicate, `false`\n  otherwise.\n \n  Dispatches to the `any` method of the second argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> Boolean\n  @param {Function} fn The predicate function.\n  @param {Array} list The array to consider.\n  @return {Boolean} `true` if the predicate is not satisfied by every element, `false` otherwise.\n  @see R.all, R.any\n  @example\n \n       var isEven = n => n % 2 === 0;\n       var isOdd = n => n % 2 === 1;\n \n       R.none(isEven, [1, 3, 5, 7, 9, 11]); //=> true\n       R.none(isOdd, [1, 3, 5, 7, 8, 11]); //=> false\n "
  },
  "not": {
    "prefix": "Rnot",
    "body": [
      "R.not($[any])"
    ],
    "description": "\n  A function that returns the `!` of its argument. It will return `true` when\n  passed false-y value, and `false` when passed a truth-y one.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Logic\n  @sig  -> Boolean\n  @param {} a any value\n  @return {Boolean} the logical inverse of passed argument.\n  @see R.complement\n  @example\n \n       R.not(true); //=> false\n       R.not(false); //=> true\n       R.not(0); //=> true\n       R.not(1); //=> false\n "
  },
  "nth": {
    "prefix": "Rnth",
    "body": [
      "R.nth($Number, $[any])"
    ],
    "description": "\n  Returns the nth element of the given list or string. If n is negative the\n  element at index length + n is returned.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Number -> [a] -> a | Undefined\n  @sig Number -> String -> String\n  @param {Number} offset\n  @param {} list\n  @return {}\n  @example\n \n       var list = ['foo', 'bar', 'baz', 'quux'];\n       R.nth(1, list); //=> 'bar'\n       R.nth(-1, list); //=> 'quux'\n       R.nth(-99, list); //=> undefined\n \n       R.nth(2, 'abc'); //=> 'c'\n       R.nth(3, 'abc'); //=> ''\n  @symb R.nth(-1, [a, b, c]) = c\n  @symb R.nth(0, [a, b, c]) = a\n  @symb R.nth(1, [a, b, c]) = b\n "
  },
  "nthArg": {
    "prefix": "RnthArg",
    "body": [
      "R.nthArg($Number)"
    ],
    "description": "\n  Returns a function which returns its nth argument.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Function\n  @sig Number -> ... -> \n  @param {Number} n\n  @return {Function}\n  @example\n \n       R.nthArg(1)('a', 'b', 'c'); //=> 'b'\n       R.nthArg(-1)('a', 'b', 'c'); //=> 'c'\n  @symb R.nthArg(-1)(a, b, c) = c\n  @symb R.nthArg(0)(a, b, c) = a\n  @symb R.nthArg(1)(a, b, c) = b\n "
  },
  "o": {
    "prefix": "Ro",
    "body": [
      "R.o($Function, $Function)"
    ],
    "description": "\n  `o` is a curried composition function that returns a unary function.\n  Like [`compose`](#compose), `o` performs right-to-left function composition.\n  Unlike [`compose`](#compose), the rightmost function passed to `o` will be\n  invoked with only one argument.\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category Function\n  @sig (b -> c) -> (a -> b) -> a -> c\n  @param {Function} f\n  @param {Function} g\n  @return {Function}\n  @see R.compose, R.pipe\n  @example\n \n       var classyGreeting = name => \"The name's \" + name.last + \", \" + name.first + \" \" + name.last\n       var yellGreeting = R.o(R.toUpper, classyGreeting);\n       yellGreeting({first: 'James', last: 'Bond'}); //=> \"THE NAME'S BOND, JAMES BOND\"\n \n       R.o(R.multiply(10), R.add(10))(-4) //=> 60\n \n  @symb R.o(f, g, x) = f(g(x))\n "
  },
  "objOf": {
    "prefix": "RobjOf",
    "body": [
      "R.objOf($String, $[any])"
    ],
    "description": "\n  Creates an object containing a single key:value pair.\n \n  @func\n  @memberOf R\n  @since v0.18.0\n  @category Object\n  @sig String -> a -> {String:a}\n  @param {String} key\n  @param {} val\n  @return {Object}\n  @see R.pair\n  @example\n \n       var matchPhrases = R.compose(\n         R.objOf('must'),\n         R.map(R.objOf('match_phrase'))\n       );\n       matchPhrases(['foo', 'bar', 'baz']); //=> {must: [{match_phrase: 'foo'}, {match_phrase: 'bar'}, {match_phrase: 'baz'}]}\n "
  },
  "of": {
    "prefix": "Rof",
    "body": [
      "R.of($[any])"
    ],
    "description": "\n  Returns a singleton array containing the value provided.\n \n  Note this `of` is different from the ES6 `of`; See\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/of\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category Function\n  @sig a -> [a]\n  @param {} x any value\n  @return {Array} An array wrapping `x`.\n  @example\n \n       R.of(null); //=> [null]\n       R.of([42]); //=> [[42]]\n "
  },
  "omit": {
    "prefix": "Romit",
    "body": [
      "R.omit($Array, $Object)"
    ],
    "description": "\n  Returns a partial copy of an object omitting the keys specified.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig [String] -> {String: } -> {String: }\n  @param {Array} names an array of String property names to omit from the new object\n  @param {Object} obj The object to copy from\n  @return {Object} A new object with properties from `names` not on it.\n  @see R.pick\n  @example\n \n       R.omit(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, c: 3}\n "
  },
  "once": {
    "prefix": "Ronce",
    "body": [
      "R.once($Function)"
    ],
    "description": "\n  Accepts a function `fn` and returns a function that guards invocation of\n  `fn` such that `fn` can only ever be called once, no matter how many times\n  the returned function is invoked. The first value calculated is returned in\n  subsequent invocations.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig (a... -> b) -> (a... -> b)\n  @param {Function} fn The function to wrap in a call-only-once wrapper.\n  @return {Function} The wrapped function.\n  @example\n \n       var addOneOnce = R.once(x => x + 1);\n       addOneOnce(10); //=> 11\n       addOneOnce(addOneOnce(50)); //=> 11\n "
  },
  "or": {
    "prefix": "Ror",
    "body": [
      "R.or($Any, $Any)"
    ],
    "description": "\n  Returns `true` if one or both of its arguments are `true`. Returns `false`\n  if both arguments are `false`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Logic\n  @sig a -> b -> a | b\n  @param {Any} a\n  @param {Any} b\n  @return {Any} the first argument if truthy, otherwise the second argument.\n  @see R.either\n  @example\n \n       R.or(true, true); //=> true\n       R.or(true, false); //=> true\n       R.or(false, true); //=> true\n       R.or(false, false); //=> false\n "
  },
  "over": {
    "prefix": "Rover",
    "body": [
      "R.over($Lens, $[any], $[any])"
    ],
    "description": "\n  Returns the result of \"setting\" the portion of the given data structure\n  focused by the given lens to the result of applying the given function to\n  the focused value.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Object\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig Lens s a -> (a -> a) -> s -> s\n  @param {Lens} lens\n  @param {} v\n  @param {} x\n  @return {}\n  @see R.prop, R.lensIndex, R.lensProp\n  @example\n \n       var headLens = R.lensIndex(0);\n \n       R.over(headLens, R.toUpper, ['foo', 'bar', 'baz']); //=> ['FOO', 'bar', 'baz']\n "
  },
  "pair": {
    "prefix": "Rpair",
    "body": [
      "R.pair($[any], $[any])"
    ],
    "description": "\n  Takes two arguments, `fst` and `snd`, and returns `[fst, snd]`.\n \n  @func\n  @memberOf R\n  @since v0.18.0\n  @category List\n  @sig a -> b -> (a,b)\n  @param {} fst\n  @param {} snd\n  @return {Array}\n  @see R.objOf, R.of\n  @example\n \n       R.pair('foo', 'bar'); //=> ['foo', 'bar']\n "
  },
  "partial": {
    "prefix": "Rpartial",
    "body": [
      "R.partial($Function, $Array)"
    ],
    "description": "\n  Takes a function `f` and a list of arguments, and returns a function `g`.\n  When applied, `g` returns the result of applying `f` to the arguments\n  provided initially followed by the arguments provided to `g`.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category Function\n  @sig ((a, b, c, ..., n) -> x) -> [a, b, c, ...] -> ((d, e, f, ..., n) -> x)\n  @param {Function} f\n  @param {Array} args\n  @return {Function}\n  @see R.partialRight\n  @example\n \n       var multiply2 = (a, b) => a  b;\n       var double = R.partial(multiply2, [2]);\n       double(2); //=> 4\n \n       var greet = (salutation, title, firstName, lastName) =>\n         salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n \n       var sayHello = R.partial(greet, ['Hello']);\n       var sayHelloToMs = R.partial(sayHello, ['Ms.']);\n       sayHelloToMs('Jane', 'Jones'); //=> 'Hello, Ms. Jane Jones!'\n  @symb R.partial(f, [a, b])(c, d) = f(a, b, c, d)\n "
  },
  "partialRight": {
    "prefix": "RpartialRight",
    "body": [
      "R.partialRight($Function, $Array)"
    ],
    "description": "\n  Takes a function `f` and a list of arguments, and returns a function `g`.\n  When applied, `g` returns the result of applying `f` to the arguments\n  provided to `g` followed by the arguments provided initially.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category Function\n  @sig ((a, b, c, ..., n) -> x) -> [d, e, f, ..., n] -> ((a, b, c, ...) -> x)\n  @param {Function} f\n  @param {Array} args\n  @return {Function}\n  @see R.partial\n  @example\n \n       var greet = (salutation, title, firstName, lastName) =>\n         salutation + ', ' + title + ' ' + firstName + ' ' + lastName + '!';\n \n       var greetMsJaneJones = R.partialRight(greet, ['Ms.', 'Jane', 'Jones']);\n \n       greetMsJaneJones('Hello'); //=> 'Hello, Ms. Jane Jones!'\n  @symb R.partialRight(f, [a, b])(c, d) = f(c, d, a, b)\n "
  },
  "partition": {
    "prefix": "Rpartition",
    "body": [
      "R.partition($Function, $Array)"
    ],
    "description": "\n  Takes a predicate and a list or other `Filterable` object and returns the\n  pair of filterable objects of the same type of elements which do and do not\n  satisfy, the predicate, respectively. Filterable objects include plain objects or any object\n  that has a filter method such as `Array`.\n \n  @func\n  @memberOf R\n  @since v0.1.4\n  @category List\n  @sig Filterable f => (a -> Boolean) -> f a -> [f a, f a]\n  @param {Function} pred A predicate to determine which side the element belongs to.\n  @param {Array} filterable the list (or other filterable) to partition.\n  @return {Array} An array, containing first the subset of elements that satisfy the\n          predicate, and second the subset of elements that do not satisfy.\n  @see R.filter, R.reject\n  @example\n \n       R.partition(R.contains('s'), ['sss', 'ttt', 'foo', 'bars']);\n       // => [ [ 'sss', 'bars' ],  [ 'ttt', 'foo' ] ]\n \n       R.partition(R.contains('s'), { a: 'sss', b: 'ttt', foo: 'bars' });\n       // => [ { a: 'sss', foo: 'bars' }, { b: 'ttt' }  ]\n "
  },
  "path": {
    "prefix": "Rpath",
    "body": [
      "R.path($Array, $Object)"
    ],
    "description": "\n  Retrieve the value at a given path.\n \n  @func\n  @memberOf R\n  @since v0.2.0\n  @category Object\n  @typedefn Idx = String | Int\n  @sig [Idx] -> {a} -> a | Undefined\n  @param {Array} path The path to use.\n  @param {Object} obj The object to retrieve the nested property from.\n  @return {} The data at `path`.\n  @see R.prop\n  @example\n \n       R.path(['a', 'b'], {a: {b: 2}}); //=> 2\n       R.path(['a', 'b'], {c: {b: 2}}); //=> undefined\n "
  },
  "pathEq": {
    "prefix": "RpathEq",
    "body": [
      "R.pathEq($Array, $[any], $Object)"
    ],
    "description": "\n  Determines whether a nested path on an object has a specific value, in\n  [`R.equals`](#equals) terms. Most likely used to filter a list.\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category Relation\n  @typedefn Idx = String | Int\n  @sig [Idx] -> a -> {a} -> Boolean\n  @param {Array} path The path of the nested property to use\n  @param {} val The value to compare the nested property with\n  @param {Object} obj The object to check the nested property in\n  @return {Boolean} `true` if the value equals the nested object property,\n          `false` otherwise.\n  @example\n \n       var user1 = { address: { zipCode: 90210 } };\n       var user2 = { address: { zipCode: 55555 } };\n       var user3 = { name: 'Bob' };\n       var users = [ user1, user2, user3 ];\n       var isFamous = R.pathEq(['address', 'zipCode'], 90210);\n       R.filter(isFamous, users); //=> [ user1 ]\n "
  },
  "pathOr": {
    "prefix": "RpathOr",
    "body": [
      "R.pathOr($[any], $Array, $Object)"
    ],
    "description": "\n  If the given, non-null object has a value at the given path, returns the\n  value at that path. Otherwise returns the provided default value.\n \n  @func\n  @memberOf R\n  @since v0.18.0\n  @category Object\n  @typedefn Idx = String | Int\n  @sig a -> [Idx] -> {a} -> a\n  @param {} d The default value.\n  @param {Array} p The path to use.\n  @param {Object} obj The object to retrieve the nested property from.\n  @return {} The data at `path` of the supplied object or the default value.\n  @example\n \n       R.pathOr('N/A', ['a', 'b'], {a: {b: 2}}); //=> 2\n       R.pathOr('N/A', ['a', 'b'], {c: {b: 2}}); //=> \"N/A\"\n "
  },
  "pathSatisfies": {
    "prefix": "RpathSatisfies",
    "body": [
      "R.pathSatisfies($Function, $Array, $[any])"
    ],
    "description": "\n  Returns `true` if the specified object property at given path satisfies the\n  given predicate; `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Logic\n  @typedefn Idx = String | Int\n  @sig (a -> Boolean) -> [Idx] -> {a} -> Boolean\n  @param {Function} pred\n  @param {Array} propPath\n  @param {} obj\n  @return {Boolean}\n  @see R.propSatisfies, R.path\n  @example\n \n       R.pathSatisfies(y => y > 0, ['x', 'y'], {x: {y: 2}}); //=> true\n "
  },
  "pick": {
    "prefix": "Rpick",
    "body": [
      "R.pick($Array, $Object)"
    ],
    "description": "\n  Returns a partial copy of an object containing only the keys specified. If\n  the key does not exist, the property is ignored.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig [k] -> {k: v} -> {k: v}\n  @param {Array} names an array of String property names to copy onto a new object\n  @param {Object} obj The object to copy from\n  @return {Object} A new object with only properties from `names` on it.\n  @see R.omit, R.props\n  @example\n \n       R.pick(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n       R.pick(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1}\n "
  },
  "pickAll": {
    "prefix": "RpickAll",
    "body": [
      "R.pickAll($Array, $Object)"
    ],
    "description": "\n  Similar to `pick` except that this one includes a `key: undefined` pair for\n  properties that don't exist.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig [k] -> {k: v} -> {k: v}\n  @param {Array} names an array of String property names to copy onto a new object\n  @param {Object} obj The object to copy from\n  @return {Object} A new object with only properties from `names` on it.\n  @see R.pick\n  @example\n \n       R.pickAll(['a', 'd'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, d: 4}\n       R.pickAll(['a', 'e', 'f'], {a: 1, b: 2, c: 3, d: 4}); //=> {a: 1, e: undefined, f: undefined}\n "
  },
  "pickBy": {
    "prefix": "RpickBy",
    "body": [
      "R.pickBy($Function, $Object)"
    ],
    "description": "\n  Returns a partial copy of an object containing only the keys that satisfy\n  the supplied predicate.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Object\n  @sig ((v, k) -> Boolean) -> {k: v} -> {k: v}\n  @param {Function} pred A predicate to determine whether or not a key\n         should be included on the output object.\n  @param {Object} obj The object to copy from\n  @return {Object} A new object with only properties that satisfy `pred`\n          on it.\n  @see R.pick, R.filter\n  @example\n \n       var isUpperCase = (val, key) => key.toUpperCase() === key;\n       R.pickBy(isUpperCase, {a: 1, b: 2, A: 3, B: 4}); //=> {A: 3, B: 4}\n "
  },
  "pipe": {
    "prefix": "Rpipe",
    "body": [
      "R.pipe($...Function)"
    ],
    "description": "\n  Performs left-to-right function composition. The leftmost function may have\n  any arity; the remaining functions must be unary.\n \n  In some libraries this function is named `sequence`.\n \n  Note: The result of pipe is not automatically curried.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig (((a, b, ..., n) -> o), (o -> p), ..., (x -> y), (y -> z)) -> ((a, b, ..., n) -> z)\n  @param {...Function} functions\n  @return {Function}\n  @see R.compose\n  @example\n \n       var f = R.pipe(Math.pow, R.negate, R.inc);\n \n       f(3, 4); // -(3^4) + 1\n  @symb R.pipe(f, g, h)(a, b) = h(g(f(a, b)))\n "
  },
  "pipeK": {
    "prefix": "RpipeK",
    "body": [
      "R.pipeK($...Function)"
    ],
    "description": "\n  Returns the left-to-right Kleisli composition of the provided functions,\n  each of which must return a value of a type supported by [`chain`](#chain).\n \n  `R.pipeK(f, g, h)` is equivalent to `R.pipe(f, R.chain(g), R.chain(h))`.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Function\n  @sig Chain m => ((a -> m b), (b -> m c), ..., (y -> m z)) -> (a -> m z)\n  @param {...Function}\n  @return {Function}\n  @see R.composeK\n  @example\n \n       //  parseJson :: String -> Maybe \n       //  get :: String -> Object -> Maybe \n \n       //  getStateCode :: Maybe String -> Maybe String\n       var getStateCode = R.pipeK(\n         parseJson,\n         get('user'),\n         get('address'),\n         get('state'),\n         R.compose(Maybe.of, R.toUpper)\n       );\n \n       getStateCode('{\"user\":{\"address\":{\"state\":\"ny\"}}}');\n       //=> Just('NY')\n       getStateCode('[Invalid JSON]');\n       //=> Nothing()\n  @symb R.pipeK(f, g, h)(a) = R.chain(h, R.chain(g, f(a)))\n "
  },
  "pipeP": {
    "prefix": "RpipeP",
    "body": [
      "R.pipeP($...Function)"
    ],
    "description": "\n  Performs left-to-right composition of one or more Promise-returning\n  functions. The leftmost function may have any arity; the remaining functions\n  must be unary.\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category Function\n  @sig ((a -> Promise b), (b -> Promise c), ..., (y -> Promise z)) -> (a -> Promise z)\n  @param {...Function} functions\n  @return {Function}\n  @see R.composeP\n  @example\n \n       //  followersForUser :: String -> Promise [User]\n       var followersForUser = R.pipeP(db.getUserById, db.getFollowers);\n "
  },
  "pluck": {
    "prefix": "Rpluck",
    "body": [
      "R.pluck($Number|String, $Array)"
    ],
    "description": "\n  Returns a new list by plucking the same named property off all objects in\n  the list supplied.\n \n  `pluck` will work on\n  any [functor](https://github.com/fantasyland/fantasy-land#functor) in\n  addition to arrays, as it is equivalent to `R.map(R.prop(k), f)`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Functor f => k -> f {k: v} -> f v\n  @param {Number|String} key The key name to pluck off of each object.\n  @param {Array} f The array or functor to consider.\n  @return {Array} The list of values for the given key.\n  @see R.props\n  @example\n \n       R.pluck('a')([{a: 1}, {a: 2}]); //=> [1, 2]\n       R.pluck(0)([[1, 2], [3, 4]]);   //=> [1, 3]\n       R.pluck('val', {a: {val: 3}, b: {val: 5}}); //=> {a: 3, b: 5}\n  @symb R.pluck('x', [{x: 1, y: 2}, {x: 3, y: 4}, {x: 5, y: 6}]) = [1, 3, 5]\n  @symb R.pluck(0, [[1, 2], [3, 4], [5, 6]]) = [1, 3, 5]\n "
  },
  "prepend": {
    "prefix": "Rprepend",
    "body": [
      "R.prepend($[any], $Array)"
    ],
    "description": "\n  Returns a new list with the given element at the front, followed by the\n  contents of the list.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig a -> [a] -> [a]\n  @param {} el The item to add to the head of the output list.\n  @param {Array} list The array to add to the tail of the output list.\n  @return {Array} A new array.\n  @see R.append\n  @example\n \n       R.prepend('fee', ['fi', 'fo', 'fum']); //=> ['fee', 'fi', 'fo', 'fum']\n "
  },
  "product": {
    "prefix": "Rproduct",
    "body": [
      "R.product($Array)"
    ],
    "description": "\n  Multiplies together all the elements of a list.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Math\n  @sig [Number] -> Number\n  @param {Array} list An array of numbers\n  @return {Number} The product of all the numbers in the list.\n  @see R.reduce\n  @example\n \n       R.product([2,4,6,8,100,1]); //=> 38400\n "
  },
  "project": {
    "prefix": "Rproject",
    "body": [
      "R.project($Array, $Array)"
    ],
    "description": "\n  Reasonable analog to SQL `select` statement.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @category Relation\n  @sig [k] -> [{k: v}] -> [{k: v}]\n  @param {Array} props The property names to project\n  @param {Array} objs The objects to query\n  @return {Array} An array of objects with just the `props` properties.\n  @example\n \n       var abby = {name: 'Abby', age: 7, hair: 'blond', grade: 2};\n       var fred = {name: 'Fred', age: 12, hair: 'brown', grade: 7};\n       var kids = [abby, fred];\n       R.project(['name', 'grade'], kids); //=> [{name: 'Abby', grade: 2}, {name: 'Fred', grade: 7}]\n "
  },
  "prop": {
    "prefix": "Rprop",
    "body": [
      "R.prop($String, $Object)"
    ],
    "description": "\n  Returns a function that when supplied an object returns the indicated\n  property of that object, if it exists.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig s -> {s: a} -> a | Undefined\n  @param {String} p The property name\n  @param {Object} obj The object to query\n  @return {} The value at `obj.p`.\n  @see R.path\n  @example\n \n       R.prop('x', {x: 100}); //=> 100\n       R.prop('x', {}); //=> undefined\n "
  },
  "propEq": {
    "prefix": "RpropEq",
    "body": [
      "R.propEq($String, $[any], $[any])"
    ],
    "description": "\n  Returns `true` if the specified object property is equal, in\n  [`R.equals`](#equals) terms, to the given value; `false` otherwise.\n  You can test multiple properties with [`R.where`](#where).\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig String -> a -> Object -> Boolean\n  @param {String} name\n  @param {} val\n  @param {} obj\n  @return {Boolean}\n  @see R.whereEq, R.propSatisfies, R.equals\n  @example\n \n       var abby = {name: 'Abby', age: 7, hair: 'blond'};\n       var fred = {name: 'Fred', age: 12, hair: 'brown'};\n       var rusty = {name: 'Rusty', age: 10, hair: 'brown'};\n       var alois = {name: 'Alois', age: 15, disposition: 'surly'};\n       var kids = [abby, fred, rusty, alois];\n       var hasBrownHair = R.propEq('hair', 'brown');\n       R.filter(hasBrownHair, kids); //=> [fred, rusty]\n "
  },
  "propIs": {
    "prefix": "RpropIs",
    "body": [
      "R.propIs($Function, $String, $[any])"
    ],
    "description": "\n  Returns `true` if the specified object property is of the given type;\n  `false` otherwise.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Type\n  @sig Type -> String -> Object -> Boolean\n  @param {Function} type\n  @param {String} name\n  @param {} obj\n  @return {Boolean}\n  @see R.is, R.propSatisfies\n  @example\n \n       R.propIs(Number, 'x', {x: 1, y: 2});  //=> true\n       R.propIs(Number, 'x', {x: 'foo'});    //=> false\n       R.propIs(Number, 'x', {});            //=> false\n "
  },
  "propOr": {
    "prefix": "RpropOr",
    "body": [
      "R.propOr($[any], $String, $Object)"
    ],
    "description": "\n  If the given, non-null object has an own property with the specified name,\n  returns the value of that property. Otherwise returns the provided default\n  value.\n \n  @func\n  @memberOf R\n  @since v0.6.0\n  @category Object\n  @sig a -> String -> Object -> a\n  @param {} val The default value.\n  @param {String} p The name of the property to return.\n  @param {Object} obj The object to query.\n  @return {} The value of given property of the supplied object or the default value.\n  @example\n \n       var alice = {\n         name: 'ALICE',\n         age: 101\n       };\n       var favorite = R.prop('favoriteLibrary');\n       var favoriteWithDefault = R.propOr('Ramda', 'favoriteLibrary');\n \n       favorite(alice);  //=> undefined\n       favoriteWithDefault(alice);  //=> 'Ramda'\n "
  },
  "props": {
    "prefix": "Rprops",
    "body": [
      "R.props($Array, $Object)"
    ],
    "description": "\n  Acts as multiple `prop`: array of keys in, array of values out. Preserves\n  order.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig [k] -> {k: v} -> [v]\n  @param {Array} ps The property names to fetch\n  @param {Object} obj The object to query\n  @return {Array} The corresponding values or partially applied function.\n  @example\n \n       R.props(['x', 'y'], {x: 1, y: 2}); //=> [1, 2]\n       R.props(['c', 'a', 'b'], {b: 2, a: 1}); //=> [undefined, 1, 2]\n \n       var fullName = R.compose(R.join(' '), R.props(['first', 'last']));\n       fullName({last: 'Bullet-Tooth', age: 33, first: 'Tony'}); //=> 'Tony Bullet-Tooth'\n "
  },
  "propSatisfies": {
    "prefix": "RpropSatisfies",
    "body": [
      "R.propSatisfies($Function, $String, $[any])"
    ],
    "description": "\n  Returns `true` if the specified object property satisfies the given\n  predicate; `false` otherwise. You can test multiple properties with\n  [`R.where`](#where).\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Logic\n  @sig (a -> Boolean) -> String -> {String: a} -> Boolean\n  @param {Function} pred\n  @param {String} name\n  @param {} obj\n  @return {Boolean}\n  @see R.where, R.propEq, R.propIs\n  @example\n \n       R.propSatisfies(x => x > 0, 'x', {x: 1, y: 2}); //=> true\n "
  },
  "range": {
    "prefix": "Rrange",
    "body": [
      "R.range($Number, $Number)"
    ],
    "description": "\n  Returns a list of numbers from `from` (inclusive) to `to` (exclusive).\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Number -> Number -> [Number]\n  @param {Number} from The first number in the list.\n  @param {Number} to One more than the last number in the list.\n  @return {Array} The list of numbers in tthe set `[a, b)`.\n  @example\n \n       R.range(1, 5);    //=> [1, 2, 3, 4]\n       R.range(50, 53);  //=> [50, 51, 52]\n "
  },
  "reduce": {
    "prefix": "Rreduce",
    "body": [
      "R.reduce($Function, $[any], $Array)"
    ],
    "description": "\n  Returns a single item by iterating through the list, successively calling\n  the iterator function and passing it an accumulator value and the current\n  value from the array, and then passing the result to the next call.\n \n  The iterator function receives two values: (acc, value). It may use\n  [`R.reduced`](#reduced) to shortcut the iteration.\n \n  The arguments' order of [`reduceRight`](#reduceRight)'s iterator function\n  is (value, acc).\n \n  Note: `R.reduce` does not skip deleted or unassigned indices (sparse\n  arrays), unlike the native `Array.prototype.reduce` method. For more details\n  on this behavior, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce#Description\n \n  Dispatches to the `reduce` method of the third argument, if present. When\n  doing so, it is up to the user to handle the [`R.reduced`](#reduced)\n  shortcuting, as this is not implemented by `reduce`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig ((a, b) -> a) -> a -> [b] -> a\n  @param {Function} fn The iterator function. Receives two values, the accumulator and the\n         current element from the array.\n  @param {} acc The accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @see R.reduced, R.addIndex, R.reduceRight\n  @example\n \n       R.reduce(R.subtract, 0, [1, 2, 3, 4]) // => ((((0 - 1) - 2) - 3) - 4) = -10\n       //          -               -10\n       //         / \\              / \\\n       //        -   4           -6   4\n       //       / \\              / \\\n       //      -   3   ==>     -3   3\n       //     / \\              / \\\n       //    -   2           -1   2\n       //   / \\              / \\\n       //  0   1            0   1\n \n  @symb R.reduce(f, a, [b, c, d]) = f(f(f(a, b), c), d)\n "
  },
  "reduceBy": {
    "prefix": "RreduceBy",
    "body": [
      "R.reduceBy($Function, $[any], $Function, $Array)"
    ],
    "description": "\n  Groups the elements of the list according to the result of calling\n  the String-returning function `keyFn` on each element and reduces the elements\n  of each group to a single value via the reducer function `valueFn`.\n \n  This function is basically a more general [`groupBy`](#groupBy) function.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.20.0\n  @category List\n  @sig ((a, b) -> a) -> a -> (b -> String) -> [b] -> {String: a}\n  @param {Function} valueFn The function that reduces the elements of each group to a single\n         value. Receives two values, accumulator for a particular group and the current element.\n  @param {} acc The (initial) accumulator value for each group.\n  @param {Function} keyFn The function that maps the list's element into a key.\n  @param {Array} list The array to group.\n  @return {Object} An object with the output of `keyFn` for keys, mapped to the output of\n          `valueFn` for elements which produced that key when passed to `keyFn`.\n  @see R.groupBy, R.reduce\n  @example\n \n       var reduceToNamesBy = R.reduceBy((acc, student) => acc.concat(student.name), []);\n       var namesByGrade = reduceToNamesBy(function(student) {\n         var score = student.score;\n         return score < 65 ? 'F' :\n                score < 70 ? 'D' :\n                score < 80 ? 'C' :\n                score < 90 ? 'B' : 'A';\n       });\n       var students = [{name: 'Lucy', score: 92},\n                       {name: 'Drew', score: 85},\n                       // ...\n                       {name: 'Bart', score: 62}];\n       namesByGrade(students);\n       // {\n       //   'A': ['Lucy'],\n       //   'B': ['Drew']\n       //   // ...,\n       //   'F': ['Bart']\n       // }\n "
  },
  "reduced": {
    "prefix": "Rreduced",
    "body": [
      "R.reduced($[any])"
    ],
    "description": "\n  Returns a value wrapped to indicate that it is the final value of the reduce\n  and transduce functions. The returned value should be considered a black\n  box: the internal structure is not guaranteed to be stable.\n \n  Note: this optimization is unavailable to functions not explicitly listed\n  above. For instance, it is not currently supported by\n  [`reduceRight`](#reduceRight).\n \n  @func\n  @memberOf R\n  @since v0.15.0\n  @category List\n  @sig a -> \n  @param {} x The final value of the reduce.\n  @return {} The wrapped value.\n  @see R.reduce, R.transduce\n  @example\n \n      R.reduce(\n        (acc, item) => item > 3 ? R.reduced(acc) : acc.concat(item),\n        [],\n        [1, 2, 3, 4, 5]) // [1, 2, 3]\n "
  },
  "reduceRight": {
    "prefix": "RreduceRight",
    "body": [
      "R.reduceRight($Function, $[any], $Array)"
    ],
    "description": "\n  Returns a single item by iterating through the list, successively calling\n  the iterator function and passing it an accumulator value and the current\n  value from the array, and then passing the result to the next call.\n \n  Similar to [`reduce`](#reduce), except moves through the input list from the\n  right to the left.\n \n  The iterator function receives two values: (value, acc), while the arguments'\n  order of `reduce`'s iterator function is (acc, value).\n \n  Note: `R.reduceRight` does not skip deleted or unassigned indices (sparse\n  arrays), unlike the native `Array.prototype.reduceRight` method. For more details\n  on this behavior, see:\n  https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight#Description\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig ((a, b) -> b) -> b -> [a] -> b\n  @param {Function} fn The iterator function. Receives two values, the current element from the array\n         and the accumulator.\n  @param {} acc The accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @see R.reduce, R.addIndex\n  @example\n \n       R.reduceRight(R.subtract, 0, [1, 2, 3, 4]) // => (1 - (2 - (3 - (4 - 0)))) = -2\n       //    -               -2\n       //   / \\              / \\\n       //  1   -            1   3\n       //     / \\              / \\\n       //    2   -     ==>    2  -1\n       //       / \\              / \\\n       //      3   -            3   4\n       //         / \\              / \\\n       //        4   0            4   0\n \n  @symb R.reduceRight(f, a, [b, c, d]) = f(b, f(c, f(d, a)))\n "
  },
  "reduceWhile": {
    "prefix": "RreduceWhile",
    "body": [
      "R.reduceWhile($Function, $Function, $[any], $Array)"
    ],
    "description": "\n  Like [`reduce`](#reduce), `reduceWhile` returns a single item by iterating\n  through the list, successively calling the iterator function. `reduceWhile`\n  also takes a predicate that is evaluated before each step. If the predicate\n  returns `false`, it \"short-circuits\" the iteration and returns the current\n  value of the accumulator.\n \n  @func\n  @memberOf R\n  @since v0.22.0\n  @category List\n  @sig ((a, b) -> Boolean) -> ((a, b) -> a) -> a -> [b] -> a\n  @param {Function} pred The predicate. It is passed the accumulator and the\n         current element.\n  @param {Function} fn The iterator function. Receives two values, the\n         accumulator and the current element.\n  @param {} a The accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @see R.reduce, R.reduced\n  @example\n \n       var isOdd = (acc, x) => x % 2 === 1;\n       var xs = [1, 3, 5, 60, 777, 800];\n       R.reduceWhile(isOdd, R.add, 0, xs); //=> 9\n \n       var ys = [2, 4, 6]\n       R.reduceWhile(isOdd, R.add, 111, ys); //=> 111\n "
  },
  "reject": {
    "prefix": "Rreject",
    "body": [
      "R.reject($Function, $Array)"
    ],
    "description": "\n  The complement of [`filter`](#filter).\n \n  Acts as a transducer if a transformer is given in list position. Filterable\n  objects include plain objects or any object that has a filter method such\n  as `Array`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Filterable f => (a -> Boolean) -> f a -> f a\n  @param {Function} pred\n  @param {Array} filterable\n  @return {Array}\n  @see R.filter, R.transduce, R.addIndex\n  @example\n \n       var isOdd = (n) => n % 2 === 1;\n \n       R.reject(isOdd, [1, 2, 3, 4]); //=> [2, 4]\n \n       R.reject(isOdd, {a: 1, b: 2, c: 3, d: 4}); //=> {b: 2, d: 4}\n "
  },
  "remove": {
    "prefix": "Rremove",
    "body": [
      "R.remove($Number, $Number, $Array)"
    ],
    "description": "\n  Removes the sub-list of `list` starting at index `start` and containing\n  `count` elements. _Note that this is not destructive_: it returns a copy of\n  the list with the changes.\n  <small>No lists have been harmed in the application of this function.</small>\n \n  @func\n  @memberOf R\n  @since v0.2.2\n  @category List\n  @sig Number -> Number -> [a] -> [a]\n  @param {Number} start The position to start removing elements\n  @param {Number} count The number of elements to remove\n  @param {Array} list The list to remove from\n  @return {Array} A new Array with `count` elements from `start` removed.\n  @example\n \n       R.remove(2, 3, [1,2,3,4,5,6,7,8]); //=> [1,2,6,7,8]\n "
  },
  "repeat": {
    "prefix": "Rrepeat",
    "body": [
      "R.repeat($[any], $Number)"
    ],
    "description": "\n  Returns a fixed list of size `n` containing a specified identical value.\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category List\n  @sig a -> n -> [a]\n  @param {} value The value to repeat.\n  @param {Number} n The desired size of the output list.\n  @return {Array} A new array containing `n` `value`s.\n  @see R.times\n  @example\n \n       R.repeat('hi', 5); //=> ['hi', 'hi', 'hi', 'hi', 'hi']\n \n       var obj = {};\n       var repeatedObjs = R.repeat(obj, 5); //=> [{}, {}, {}, {}, {}]\n       repeatedObjs[0] === repeatedObjs[1]; //=> true\n  @symb R.repeat(a, 0) = []\n  @symb R.repeat(a, 1) = [a]\n  @symb R.repeat(a, 2) = [a, a]\n "
  },
  "replace": {
    "prefix": "Rreplace",
    "body": [
      "R.replace($RegExp|String, $String, $String)"
    ],
    "description": "\n  Replace a substring or regex match in a string with a replacement.\n \n  @func\n  @memberOf R\n  @since v0.7.0\n  @category String\n  @sig RegExp|String -> String -> String -> String\n  @param {RegExp|String} pattern A regular expression or a substring to match.\n  @param {String} replacement The string to replace the matches with.\n  @param {String} str The String to do the search and replacement in.\n  @return {String} The result.\n  @example\n \n       R.replace('foo', 'bar', 'foo foo foo'); //=> 'bar foo foo'\n       R.replace(/foo/, 'bar', 'foo foo foo'); //=> 'bar foo foo'\n \n       // Use the \"g\" (global) flag to replace all occurrences:\n       R.replace(/foo/g, 'bar', 'foo foo foo'); //=> 'bar bar bar'\n "
  },
  "reverse": {
    "prefix": "Rreverse",
    "body": [
      "R.reverse($Array|String)"
    ],
    "description": "\n  Returns a new list or string with the elements or characters in reverse\n  order.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [a]\n  @sig String -> String\n  @param {Array|String} list\n  @return {Array|String}\n  @example\n \n       R.reverse([1, 2, 3]);  //=> [3, 2, 1]\n       R.reverse([1, 2]);     //=> [2, 1]\n       R.reverse([1]);        //=> [1]\n       R.reverse([]);         //=> []\n \n       R.reverse('abc');      //=> 'cba'\n       R.reverse('ab');       //=> 'ba'\n       R.reverse('a');        //=> 'a'\n       R.reverse('');         //=> ''\n "
  },
  "scan": {
    "prefix": "Rscan",
    "body": [
      "R.scan($Function, $[any], $Array)"
    ],
    "description": "\n  Scan is similar to [`reduce`](#reduce), but returns a list of successively\n  reduced values from the left\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category List\n  @sig ((a, b) -> a) -> a -> [b] -> [a]\n  @param {Function} fn The iterator function. Receives two values, the accumulator and the\n         current element from the array\n  @param {} acc The accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {Array} A list of all intermediately reduced values.\n  @see R.reduce\n  @example\n \n       var numbers = [1, 2, 3, 4];\n       var factorials = R.scan(R.multiply, 1, numbers); //=> [1, 1, 2, 6, 24]\n  @symb R.scan(f, a, [b, c]) = [a, f(a, b), f(f(a, b), c)]\n "
  },
  "sequence": {
    "prefix": "Rsequence",
    "body": [
      "R.sequence($Function, $[any])"
    ],
    "description": "\n  Transforms a [Traversable](https://github.com/fantasyland/fantasy-land#traversable)\n  of [Applicative](https://github.com/fantasyland/fantasy-land#applicative) into an\n  Applicative of Traversable.\n \n  Dispatches to the `sequence` method of the second argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig (Applicative f, Traversable t) => (a -> f a) -> t (f a) -> f (t a)\n  @param {Function} of\n  @param {} traversable\n  @return {}\n  @see R.traverse\n  @example\n \n       R.sequence(Maybe.of, [Just(1), Just(2), Just(3)]);   //=> Just([1, 2, 3])\n       R.sequence(Maybe.of, [Just(1), Just(2), Nothing()]); //=> Nothing()\n \n       R.sequence(R.of, Just([1, 2, 3])); //=> [Just(1), Just(2), Just(3)]\n       R.sequence(R.of, Nothing());       //=> [Nothing()]\n "
  },
  "set": {
    "prefix": "Rset",
    "body": [
      "R.set($Lens, $[any], $[any])"
    ],
    "description": "\n  Returns the result of \"setting\" the portion of the given data structure\n  focused by the given lens to the given value.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Object\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig Lens s a -> a -> s -> s\n  @param {Lens} lens\n  @param {} v\n  @param {} x\n  @return {}\n  @see R.prop, R.lensIndex, R.lensProp\n  @example\n \n       var xLens = R.lensProp('x');\n \n       R.set(xLens, 4, {x: 1, y: 2});  //=> {x: 4, y: 2}\n       R.set(xLens, 8, {x: 1, y: 2});  //=> {x: 8, y: 2}\n "
  },
  "slice": {
    "prefix": "Rslice",
    "body": [
      "R.slice($Number, $Number, $[any])"
    ],
    "description": "\n  Returns the elements of the given list or string (or object with a `slice`\n  method) from `fromIndex` (inclusive) to `toIndex` (exclusive).\n \n  Dispatches to the `slice` method of the third argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.1.4\n  @category List\n  @sig Number -> Number -> [a] -> [a]\n  @sig Number -> Number -> String -> String\n  @param {Number} fromIndex The start index (inclusive).\n  @param {Number} toIndex The end index (exclusive).\n  @param {} list\n  @return {}\n  @example\n \n       R.slice(1, 3, ['a', 'b', 'c', 'd']);        //=> ['b', 'c']\n       R.slice(1, Infinity, ['a', 'b', 'c', 'd']); //=> ['b', 'c', 'd']\n       R.slice(0, -1, ['a', 'b', 'c', 'd']);       //=> ['a', 'b', 'c']\n       R.slice(-3, -1, ['a', 'b', 'c', 'd']);      //=> ['b', 'c']\n       R.slice(0, 3, 'ramda');                     //=> 'ram'\n "
  },
  "sort": {
    "prefix": "Rsort",
    "body": [
      "R.sort($Function, $Array)"
    ],
    "description": "\n  Returns a copy of the list, sorted according to the comparator function,\n  which should accept two values at a time and return a negative number if the\n  first value is smaller, a positive number if it's larger, and zero if they\n  are equal. Please note that this is a copy of the list. It does not\n  modify the original.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig ((a, a) -> Number) -> [a] -> [a]\n  @param {Function} comparator A sorting function :: a -> b -> Int\n  @param {Array} list The list to sort\n  @return {Array} a new array with its elements sorted by the comparator function.\n  @example\n \n       var diff = function(a, b) { return a - b; };\n       R.sort(diff, [4,2,7,5]); //=> [2, 4, 5, 7]\n "
  },
  "sortBy": {
    "prefix": "RsortBy",
    "body": [
      "R.sortBy($Function, $Array)"
    ],
    "description": "\n  Sorts the list according to the supplied function.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig Ord b => (a -> b) -> [a] -> [a]\n  @param {Function} fn\n  @param {Array} list The list to sort.\n  @return {Array} A new list sorted by the keys generated by `fn`.\n  @example\n \n       var sortByFirstItem = R.sortBy(R.prop(0));\n       var sortByNameCaseInsensitive = R.sortBy(R.compose(R.toLower, R.prop('name')));\n       var pairs = [[-1, 1], [-2, 2], [-3, 3]];\n       sortByFirstItem(pairs); //=> [[-3, 3], [-2, 2], [-1, 1]]\n       var alice = {\n         name: 'ALICE',\n         age: 101\n       };\n       var bob = {\n         name: 'Bob',\n         age: -10\n       };\n       var clara = {\n         name: 'clara',\n         age: 314.159\n       };\n       var people = [clara, bob, alice];\n       sortByNameCaseInsensitive(people); //=> [alice, bob, clara]\n "
  },
  "sortWith": {
    "prefix": "RsortWith",
    "body": [
      "R.sortWith($Array, $Array)"
    ],
    "description": "\n  Sorts a list according to a list of comparators.\n \n  @func\n  @memberOf R\n  @since v0.23.0\n  @category Relation\n  @sig [(a, a) -> Number] -> [a] -> [a]\n  @param {Array} functions A list of comparator functions.\n  @param {Array} list The list to sort.\n  @return {Array} A new list sorted according to the comarator functions.\n  @example\n \n       var alice = {\n         name: 'alice',\n         age: 40\n       };\n       var bob = {\n         name: 'bob',\n         age: 30\n       };\n       var clara = {\n         name: 'clara',\n         age: 40\n       };\n       var people = [clara, bob, alice];\n       var ageNameSort = R.sortWith([\n         R.descend(R.prop('age')),\n         R.ascend(R.prop('name'))\n       ]);\n       ageNameSort(people); //=> [alice, clara, bob]\n "
  },
  "split": {
    "prefix": "Rsplit",
    "body": [
      "R.split($String|RegExp, $String)"
    ],
    "description": "\n  Splits a string into an array of strings based on the given\n  separator.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category String\n  @sig (String | RegExp) -> String -> [String]\n  @param {String|RegExp} sep The pattern.\n  @param {String} str The string to separate into an array.\n  @return {Array} The array of strings from `str` separated by `str`.\n  @see R.join\n  @example\n \n       var pathComponents = R.split('/');\n       R.tail(pathComponents('/usr/local/bin/node')); //=> ['usr', 'local', 'bin', 'node']\n \n       R.split('.', 'a.b.c.xyz.d'); //=> ['a', 'b', 'c', 'xyz', 'd']\n "
  },
  "splitAt": {
    "prefix": "RsplitAt",
    "body": [
      "R.splitAt($Number, $Array|String)"
    ],
    "description": "\n  Splits a given list or string at a given index.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig Number -> [a] -> [[a], [a]]\n  @sig Number -> String -> [String, String]\n  @param {Number} index The index where the array/string is split.\n  @param {Array|String} array The array/string to be split.\n  @return {Array}\n  @example\n \n       R.splitAt(1, [1, 2, 3]);          //=> [[1], [2, 3]]\n       R.splitAt(5, 'hello world');      //=> ['hello', ' world']\n       R.splitAt(-1, 'foobar');          //=> ['fooba', 'r']\n "
  },
  "splitEvery": {
    "prefix": "RsplitEvery",
    "body": [
      "R.splitEvery($Number, $Array)"
    ],
    "description": "\n  Splits a collection into slices of the specified length.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category List\n  @sig Number -> [a] -> [[a]]\n  @sig Number -> String -> [String]\n  @param {Number} n\n  @param {Array} list\n  @return {Array}\n  @example\n \n       R.splitEvery(3, [1, 2, 3, 4, 5, 6, 7]); //=> [[1, 2, 3], [4, 5, 6], [7]]\n       R.splitEvery(3, 'foobarbaz'); //=> ['foo', 'bar', 'baz']\n "
  },
  "splitWhen": {
    "prefix": "RsplitWhen",
    "body": [
      "R.splitWhen($Function, $Array)"
    ],
    "description": "\n  Takes a list and a predicate and returns a pair of lists with the following properties:\n \n   - the result of concatenating the two output lists is equivalent to the input list;\n   - none of the elements of the first output list satisfies the predicate; and\n   - if the second output list is non-empty, its first element satisfies the predicate.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> [[a], [a]]\n  @param {Function} pred The predicate that determines where the array is split.\n  @param {Array} list The array to be split.\n  @return {Array}\n  @example\n \n       R.splitWhen(R.equals(2), [1, 2, 3, 1, 2, 3]);   //=> [[1], [2, 3, 1, 2, 3]]\n "
  },
  "startsWith": {
    "prefix": "RstartsWith",
    "body": [
      "R.startsWith($[any], $[any])"
    ],
    "description": "\n  Checks if a list starts with the provided values\n \n  @func\n  @memberOf R\n  @since v0.24.0\n  @category List\n  @sig [a] -> Boolean\n  @sig String -> Boolean\n  @param {} prefix\n  @param {} list\n  @return {Boolean}\n  @example\n \n       R.startsWith('a', 'abc')                //=> true\n       R.startsWith('b', 'abc')                //=> false\n       R.startsWith(['a'], ['a', 'b', 'c'])    //=> true\n       R.startsWith(['b'], ['a', 'b', 'c'])    //=> false\n "
  },
  "subtract": {
    "prefix": "Rsubtract",
    "body": [
      "R.subtract($Number, $Number)"
    ],
    "description": "\n  Subtracts its second argument from its first argument.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Math\n  @sig Number -> Number -> Number\n  @param {Number} a The first value.\n  @param {Number} b The second value.\n  @return {Number} The result of `a - b`.\n  @see R.add\n  @example\n \n       R.subtract(10, 8); //=> 2\n \n       var minus5 = R.subtract(R.__, 5);\n       minus5(17); //=> 12\n \n       var complementaryAngle = R.subtract(90);\n       complementaryAngle(30); //=> 60\n       complementaryAngle(72); //=> 18\n "
  },
  "sum": {
    "prefix": "Rsum",
    "body": [
      "R.sum($Array)"
    ],
    "description": "\n  Adds together all the elements of a list.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Math\n  @sig [Number] -> Number\n  @param {Array} list An array of numbers\n  @return {Number} The sum of all the numbers in the list.\n  @see R.reduce\n  @example\n \n       R.sum([2,4,6,8,100,1]); //=> 121\n "
  },
  "symmetricDifference": {
    "prefix": "RsymmetricDifference",
    "body": [
      "R.symmetricDifference($Array, $Array)"
    ],
    "description": "\n  Finds the set (i.e. no duplicates) of all elements contained in the first or\n  second list, but not both.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Relation\n  @sig [] -> [] -> []\n  @param {Array} list1 The first list.\n  @param {Array} list2 The second list.\n  @return {Array} The elements in `list1` or `list2`, but not both.\n  @see R.symmetricDifferenceWith, R.difference, R.differenceWith\n  @example\n \n       R.symmetricDifference([1,2,3,4], [7,6,5,4,3]); //=> [1,2,7,6,5]\n       R.symmetricDifference([7,6,5,4,3], [1,2,3,4]); //=> [7,6,5,1,2]\n "
  },
  "symmetricDifferenceWith": {
    "prefix": "RsymmetricDifferenceWith",
    "body": [
      "R.symmetricDifferenceWith($Function, $Array, $Array)"
    ],
    "description": "\n  Finds the set (i.e. no duplicates) of all elements contained in the first or\n  second list, but not both. Duplication is determined according to the value\n  returned by applying the supplied predicate to two list elements.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category Relation\n  @sig ((a, a) -> Boolean) -> [a] -> [a] -> [a]\n  @param {Function} pred A predicate used to test whether two items are equal.\n  @param {Array} list1 The first list.\n  @param {Array} list2 The second list.\n  @return {Array} The elements in `list1` or `list2`, but not both.\n  @see R.symmetricDifference, R.difference, R.differenceWith\n  @example\n \n       var eqA = R.eqBy(R.prop('a'));\n       var l1 = [{a: 1}, {a: 2}, {a: 3}, {a: 4}];\n       var l2 = [{a: 3}, {a: 4}, {a: 5}, {a: 6}];\n       R.symmetricDifferenceWith(eqA, l1, l2); //=> [{a: 1}, {a: 2}, {a: 5}, {a: 6}]\n "
  },
  "T": {
    "prefix": "RT",
    "body": [
      "R.T($[any])"
    ],
    "description": "\n  A function that always returns `true`. Any passed in parameters are ignored.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category Function\n  @sig  -> Boolean\n  @param {}\n  @return {Boolean}\n  @see R.always, R.F\n  @example\n \n       R.T(); //=> true\n "
  },
  "tail": {
    "prefix": "Rtail",
    "body": [
      "R.tail($[any])"
    ],
    "description": "\n  Returns all but the first element of the given list or string (or object\n  with a `tail` method).\n \n  Dispatches to the `slice` method of the first argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [a]\n  @sig String -> String\n  @param {} list\n  @return {}\n  @see R.head, R.init, R.last\n  @example\n \n       R.tail([1, 2, 3]);  //=> [2, 3]\n       R.tail([1, 2]);     //=> [2]\n       R.tail([1]);        //=> []\n       R.tail([]);         //=> []\n \n       R.tail('abc');  //=> 'bc'\n       R.tail('ab');   //=> 'b'\n       R.tail('a');    //=> ''\n       R.tail('');     //=> ''\n "
  },
  "take": {
    "prefix": "Rtake",
    "body": [
      "R.take($Number, $[any])"
    ],
    "description": "\n  Returns the first `n` elements of the given list, string, or\n  transducer/transformer (or object with a `take` method).\n \n  Dispatches to the `take` method of the second argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig Number -> [a] -> [a]\n  @sig Number -> String -> String\n  @param {Number} n\n  @param {} list\n  @return {}\n  @see R.drop\n  @example\n \n       R.take(1, ['foo', 'bar', 'baz']); //=> ['foo']\n       R.take(2, ['foo', 'bar', 'baz']); //=> ['foo', 'bar']\n       R.take(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n       R.take(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n       R.take(3, 'ramda');               //=> 'ram'\n \n       var personnel = [\n         'Dave Brubeck',\n         'Paul Desmond',\n         'Eugene Wright',\n         'Joe Morello',\n         'Gerry Mulligan',\n         'Bob Bates',\n         'Joe Dodge',\n         'Ron Crotty'\n       ];\n \n       var takeFive = R.take(5);\n       takeFive(personnel);\n       //=> ['Dave Brubeck', 'Paul Desmond', 'Eugene Wright', 'Joe Morello', 'Gerry Mulligan']\n  @symb R.take(-1, [a, b]) = [a, b]\n  @symb R.take(0, [a, b]) = []\n  @symb R.take(1, [a, b]) = [a]\n  @symb R.take(2, [a, b]) = [a, b]\n "
  },
  "takeLast": {
    "prefix": "RtakeLast",
    "body": [
      "R.takeLast($Number, $Array)"
    ],
    "description": "\n  Returns a new list containing the last `n` elements of the given list.\n  If `n > list.length`, returns a list of `list.length` elements.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category List\n  @sig Number -> [a] -> [a]\n  @sig Number -> String -> String\n  @param {Number} n The number of elements to return.\n  @param {Array} xs The collection to consider.\n  @return {Array}\n  @see R.dropLast\n  @example\n \n       R.takeLast(1, ['foo', 'bar', 'baz']); //=> ['baz']\n       R.takeLast(2, ['foo', 'bar', 'baz']); //=> ['bar', 'baz']\n       R.takeLast(3, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n       R.takeLast(4, ['foo', 'bar', 'baz']); //=> ['foo', 'bar', 'baz']\n       R.takeLast(3, 'ramda');               //=> 'mda'\n "
  },
  "takeLastWhile": {
    "prefix": "RtakeLastWhile",
    "body": [
      "R.takeLastWhile($Function, $Array)"
    ],
    "description": "\n  Returns a new list containing the last `n` elements of a given list, passing\n  each value to the supplied predicate function, and terminating when the\n  predicate function returns `false`. Excludes the element that caused the\n  predicate function to fail. The predicate function is passed one argument:\n  (value).\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> [a]\n  @sig (a -> Boolean) -> String -> String\n  @param {Function} fn The function called per iteration.\n  @param {Array} xs The collection to iterate over.\n  @return {Array} A new array.\n  @see R.dropLastWhile, R.addIndex\n  @example\n \n       var isNotOne = x => x !== 1;\n \n       R.takeLastWhile(isNotOne, [1, 2, 3, 4]); //=> [2, 3, 4]\n \n       R.takeLastWhile(x => x !== 'R' , 'Ramda'); //=> 'amda'\n "
  },
  "takeWhile": {
    "prefix": "RtakeWhile",
    "body": [
      "R.takeWhile($Function, $Array)"
    ],
    "description": "\n  Returns a new list containing the first `n` elements of a given list,\n  passing each value to the supplied predicate function, and terminating when\n  the predicate function returns `false`. Excludes the element that caused the\n  predicate function to fail. The predicate function is passed one argument:\n  (value).\n \n  Dispatches to the `takeWhile` method of the second argument, if present.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig (a -> Boolean) -> [a] -> [a]\n  @sig (a -> Boolean) -> String -> String\n  @param {Function} fn The function called per iteration.\n  @param {Array} xs The collection to iterate over.\n  @return {Array} A new array.\n  @see R.dropWhile, R.transduce, R.addIndex\n  @example\n \n       var isNotFour = x => x !== 4;\n \n       R.takeWhile(isNotFour, [1, 2, 3, 4, 3, 2, 1]); //=> [1, 2, 3]\n \n       R.takeWhile(x => x !== 'd' , 'Ramda'); //=> 'Ram'\n "
  },
  "tap": {
    "prefix": "Rtap",
    "body": [
      "R.tap($Function, $[any])"
    ],
    "description": "\n  Runs the given function with the supplied object, then returns the object.\n \n  Acts as a transducer if a transformer is given as second parameter.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig (a -> ) -> a -> a\n  @param {Function} fn The function to call with `x`. The return value of `fn` will be thrown away.\n  @param {} x\n  @return {} `x`.\n  @example\n \n       var sayX = x => console.log('x is ' + x);\n       R.tap(sayX, 100); //=> 100\n       // logs 'x is 100'\n  @symb R.tap(f, a) = a\n "
  },
  "test": {
    "prefix": "Rtest",
    "body": [
      "R.test($RegExp, $String)"
    ],
    "description": "\n  Determines whether a given string matches a given regular expression.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category String\n  @sig RegExp -> String -> Boolean\n  @param {RegExp} pattern\n  @param {String} str\n  @return {Boolean}\n  @see R.match\n  @example\n \n       R.test(/^x/, 'xyz'); //=> true\n       R.test(/^y/, 'xyz'); //=> false\n "
  },
  "times": {
    "prefix": "Rtimes",
    "body": [
      "R.times($Function, $Number)"
    ],
    "description": "\n  Calls an input function `n` times, returning an array containing the results\n  of those function calls.\n \n  `fn` is passed one argument: The current value of `n`, which begins at `0`\n  and is gradually incremented to `n - 1`.\n \n  @func\n  @memberOf R\n  @since v0.2.3\n  @category List\n  @sig (Number -> a) -> Number -> [a]\n  @param {Function} fn The function to invoke. Passed one argument, the current value of `n`.\n  @param {Number} n A value between `0` and `n - 1`. Increments after each function call.\n  @return {Array} An array containing the return values of all calls to `fn`.\n  @see R.repeat\n  @example\n \n       R.times(R.identity, 5); //=> [0, 1, 2, 3, 4]\n  @symb R.times(f, 0) = []\n  @symb R.times(f, 1) = [f(0)]\n  @symb R.times(f, 2) = [f(0), f(1)]\n "
  },
  "toLower": {
    "prefix": "RtoLower",
    "body": [
      "R.toLower($String)"
    ],
    "description": "\n  The lower case version of a string.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category String\n  @sig String -> String\n  @param {String} str The string to lower case.\n  @return {String} The lower case version of `str`.\n  @see R.toUpper\n  @example\n \n       R.toLower('XYZ'); //=> 'xyz'\n "
  },
  "toPairs": {
    "prefix": "RtoPairs",
    "body": [
      "R.toPairs($Object)"
    ],
    "description": "\n  Converts an object into an array of key, value arrays. Only the object's\n  own properties are used.\n  Note that the order of the output array is not guaranteed to be consistent\n  across different JS platforms.\n \n  @func\n  @memberOf R\n  @since v0.4.0\n  @category Object\n  @sig {String: } -> [[String,]]\n  @param {Object} obj The object to extract from\n  @return {Array} An array of key, value arrays from the object's own properties.\n  @see R.fromPairs\n  @example\n \n       R.toPairs({a: 1, b: 2, c: 3}); //=> [['a', 1], ['b', 2], ['c', 3]]\n "
  },
  "toPairsIn": {
    "prefix": "RtoPairsIn",
    "body": [
      "R.toPairsIn($Object)"
    ],
    "description": "\n  Converts an object into an array of key, value arrays. The object's own\n  properties and prototype properties are used. Note that the order of the\n  output array is not guaranteed to be consistent across different JS\n  platforms.\n \n  @func\n  @memberOf R\n  @since v0.4.0\n  @category Object\n  @sig {String: } -> [[String,]]\n  @param {Object} obj The object to extract from\n  @return {Array} An array of key, value arrays from the object's own\n          and prototype properties.\n  @example\n \n       var F = function() { this.x = 'X'; };\n       F.prototype.y = 'Y';\n       var f = new F();\n       R.toPairsIn(f); //=> [['x','X'], ['y','Y']]\n "
  },
  "toString": {
    "prefix": "RtoString",
    "body": [
      "R.toString($[any])"
    ],
    "description": "\n  Returns the string representation of the given value. `eval`'ing the output\n  should result in a value equivalent to the input value. Many of the built-in\n  `toString` methods do not satisfy this requirement.\n \n  If the given value is an `[object Object]` with a `toString` method other\n  than `Object.prototype.toString`, this method is invoked with no arguments\n  to produce the return value. This means user-defined constructor functions\n  can provide a suitable `toString` method. For example:\n \n      function Point(x, y) {\n        this.x = x;\n        this.y = y;\n      }\n \n      Point.prototype.toString = function() {\n        return 'new Point(' + this.x + ', ' + this.y + ')';\n      };\n \n      R.toString(new Point(1, 2)); //=> 'new Point(1, 2)'\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category String\n  @sig  -> String\n  @param {} val\n  @return {String}\n  @example\n \n       R.toString(42); //=> '42'\n       R.toString('abc'); //=> '\"abc\"'\n       R.toString([1, 2, 3]); //=> '[1, 2, 3]'\n       R.toString({foo: 1, bar: 2, baz: 3}); //=> '{\"bar\": 2, \"baz\": 3, \"foo\": 1}'\n       R.toString(new Date('2001-02-03T04:05:06Z')); //=> 'new Date(\"2001-02-03T04:05:06.000Z\")'\n "
  },
  "toUpper": {
    "prefix": "RtoUpper",
    "body": [
      "R.toUpper($String)"
    ],
    "description": "\n  The upper case version of a string.\n \n  @func\n  @memberOf R\n  @since v0.9.0\n  @category String\n  @sig String -> String\n  @param {String} str The string to upper case.\n  @return {String} The upper case version of `str`.\n  @see R.toLower\n  @example\n \n       R.toUpper('abc'); //=> 'ABC'\n "
  },
  "transduce": {
    "prefix": "Rtransduce",
    "body": [
      "R.transduce($Function, $Function, $[any], $Array)"
    ],
    "description": "\n  Initializes a transducer using supplied iterator function. Returns a single\n  item by iterating through the list, successively calling the transformed\n  iterator function and passing it an accumulator value and the current value\n  from the array, and then passing the result to the next call.\n \n  The iterator function receives two values: (acc, value). It will be\n  wrapped as a transformer to initialize the transducer. A transformer can be\n  passed directly in place of an iterator function. In both cases, iteration\n  may be stopped early with the [`R.reduced`](#reduced) function.\n \n  A transducer is a function that accepts a transformer and returns a\n  transformer and can be composed directly.\n \n  A transformer is an an object that provides a 2-arity reducing iterator\n  function, step, 0-arity initial value function, init, and 1-arity result\n  extraction function, result. The step function is used as the iterator\n  function in reduce. The result function is used to convert the final\n  accumulator into the return type and in most cases is\n  [`R.identity`](#identity). The init function can be used to provide an\n  initial accumulator, but is ignored by transduce.\n \n  The iteration is performed with [`R.reduce`](#reduce) after initializing the transducer.\n \n  @func\n  @memberOf R\n  @since v0.12.0\n  @category List\n  @sig (c -> c) -> ((a, b) -> a) -> a -> [b] -> a\n  @param {Function} xf The transducer function. Receives a transformer and returns a transformer.\n  @param {Function} fn The iterator function. Receives two values, the accumulator and the\n         current element from the array. Wrapped as transformer, if necessary, and used to\n         initialize the transducer\n  @param {} acc The initial accumulator value.\n  @param {Array} list The list to iterate over.\n  @return {} The final, accumulated value.\n  @see R.reduce, R.reduced, R.into\n  @example\n \n       var numbers = [1, 2, 3, 4];\n       var transducer = R.compose(R.map(R.add(1)), R.take(2));\n       R.transduce(transducer, R.flip(R.append), [], numbers); //=> [2, 3]\n \n       var isOdd = (x) => x % 2 === 1;\n       var firstOddTransducer = R.compose(R.filter(isOdd), R.take(1));\n       R.transduce(firstOddTransducer, R.flip(R.append), [], R.range(0, 100)); //=> [1]\n "
  },
  "transpose": {
    "prefix": "Rtranspose",
    "body": [
      "R.transpose($Array)"
    ],
    "description": "\n  Transposes the rows and columns of a 2D list.\n  When passed a list of `n` lists of length `x`,\n  returns a list of `x` lists of length `n`.\n \n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig [[a]] -> [[a]]\n  @param {Array} list A 2D list\n  @return {Array} A 2D list\n  @example\n \n       R.transpose([[1, 'a'], [2, 'b'], [3, 'c']]) //=> [[1, 2, 3], ['a', 'b', 'c']]\n       R.transpose([[1, 2, 3], ['a', 'b', 'c']]) //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n \n       // If some of the rows are shorter than the following rows, their elements are skipped:\n       R.transpose([[10, 11], [20], [], [30, 31, 32]]) //=> [[10, 20, 30], [11, 31], [32]]\n  @symb R.transpose([[a], [b], [c]]) = [a, b, c]\n  @symb R.transpose([[a, b], [c, d]]) = [[a, c], [b, d]]\n  @symb R.transpose([[a, b], [c]]) = [[a, c], [b]]\n "
  },
  "traverse": {
    "prefix": "Rtraverse",
    "body": [
      "R.traverse($Function, $Function, $[any])"
    ],
    "description": "\n  Maps an [Applicative](https://github.com/fantasyland/fantasy-land#applicative)-returning\n  function over a [Traversable](https://github.com/fantasyland/fantasy-land#traversable),\n  then uses [`sequence`](#sequence) to transform the resulting Traversable of Applicative\n  into an Applicative of Traversable.\n \n  Dispatches to the `traverse` method of the third argument, if present.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig (Applicative f, Traversable t) => (a -> f a) -> (a -> f b) -> t a -> f (t b)\n  @param {Function} of\n  @param {Function} f\n  @param {} traversable\n  @return {}\n  @see R.sequence\n  @example\n \n       // Returns `Nothing` if the given divisor is `0`\n       safeDiv = n => d => d === 0 ? Nothing() : Just(n / d)\n \n       R.traverse(Maybe.of, safeDiv(10), [2, 4, 5]); //=> Just([5, 2.5, 2])\n       R.traverse(Maybe.of, safeDiv(10), [2, 0, 5]); //=> Nothing\n "
  },
  "trim": {
    "prefix": "Rtrim",
    "body": [
      "R.trim($String)"
    ],
    "description": "\n  Removes (strips) whitespace from both ends of the string.\n \n  @func\n  @memberOf R\n  @since v0.6.0\n  @category String\n  @sig String -> String\n  @param {String} str The string to trim.\n  @return {String} Trimmed version of `str`.\n  @example\n \n       R.trim('   xyz  '); //=> 'xyz'\n       R.map(R.trim, R.split(',', 'x, y, z')); //=> ['x', 'y', 'z']\n "
  },
  "tryCatch": {
    "prefix": "RtryCatch",
    "body": [
      "R.tryCatch($Function, $Function)"
    ],
    "description": "\n  `tryCatch` takes two functions, a `tryer` and a `catcher`. The returned\n  function evaluates the `tryer`; if it does not throw, it simply returns the\n  result. If the `tryer` does throw, the returned function evaluates the\n  `catcher` function and returns its result. Note that for effective\n  composition with this function, both the `tryer` and `catcher` functions\n  must return the same type of results.\n \n  @func\n  @memberOf R\n  @since v0.20.0\n  @category Function\n  @sig (...x -> a) -> ((e, ...x) -> a) -> (...x -> a)\n  @param {Function} tryer The function that may throw.\n  @param {Function} catcher The function that will be evaluated if `tryer` throws.\n  @return {Function} A new function that will catch exceptions and send then to the catcher.\n  @example\n \n       R.tryCatch(R.prop('x'), R.F)({x: true}); //=> true\n       R.tryCatch(R.prop('x'), R.F)(null);      //=> false\n "
  },
  "type": {
    "prefix": "Rtype",
    "body": [
      "R.type($[any])"
    ],
    "description": "\n  Gives a single-word string description of the (native) type of a value,\n  returning such answers as 'Object', 'Number', 'Array', or 'Null'. Does not\n  attempt to distinguish user Object types any further, reporting them all as\n  'Object'.\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Type\n  @sig ( -> {}) -> String\n  @param {} val The value to test\n  @return {String}\n  @example\n \n       R.type({}); //=> \"Object\"\n       R.type(1); //=> \"Number\"\n       R.type(false); //=> \"Boolean\"\n       R.type('s'); //=> \"String\"\n       R.type(null); //=> \"Null\"\n       R.type([]); //=> \"Array\"\n       R.type(/[A-z]/); //=> \"RegExp\"\n       R.type(() => {}); //=> \"Function\"\n       R.type(undefined); //=> \"Undefined\"\n "
  },
  "unapply": {
    "prefix": "Runapply",
    "body": [
      "R.unapply($Function)"
    ],
    "description": "\n  Takes a function `fn`, which takes a single array argument, and returns a\n  function which:\n \n    - takes any number of positional arguments;\n    - passes these arguments to `fn` as an array; and\n    - returns the result.\n \n  In other words, `R.unapply` derives a variadic function from a function which\n  takes an array. `R.unapply` is the inverse of [`R.apply`](#apply).\n \n  @func\n  @memberOf R\n  @since v0.8.0\n  @category Function\n  @sig ([...] -> a) -> (... -> a)\n  @param {Function} fn\n  @return {Function}\n  @see R.apply\n  @example\n \n       R.unapply(JSON.stringify)(1, 2, 3); //=> '[1,2,3]'\n  @symb R.unapply(f)(a, b) = f([a, b])\n "
  },
  "unary": {
    "prefix": "Runary",
    "body": [
      "R.unary($Function)"
    ],
    "description": "\n  Wraps a function of any arity (including nullary) in a function that accepts\n  exactly 1 parameter. Any extraneous parameters will not be passed to the\n  supplied function.\n \n  @func\n  @memberOf R\n  @since v0.2.0\n  @category Function\n  @sig ( -> b) -> (a -> b)\n  @param {Function} fn The function to wrap.\n  @return {Function} A new function wrapping `fn`. The new function is guaranteed to be of\n          arity 1.\n  @see R.binary, R.nAry\n  @example\n \n       var takesTwoArgs = function(a, b) {\n         return [a, b];\n       };\n       takesTwoArgs.length; //=> 2\n       takesTwoArgs(1, 2); //=> [1, 2]\n \n       var takesOneArg = R.unary(takesTwoArgs);\n       takesOneArg.length; //=> 1\n       // Only 1 argument is passed to the wrapped function\n       takesOneArg(1, 2); //=> [1, undefined]\n  @symb R.unary(f)(a, b, c) = f(a)\n "
  },
  "uncurryN": {
    "prefix": "RuncurryN",
    "body": [
      "R.uncurryN($Number, $Function)"
    ],
    "description": "\n  Returns a function of arity `n` from a (manually) curried function.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category Function\n  @sig Number -> (a -> b) -> (a -> c)\n  @param {Number} length The arity for the returned function.\n  @param {Function} fn The function to uncurry.\n  @return {Function} A new function.\n  @see R.curry\n  @example\n \n       var addFour = a => b => c => d => a + b + c + d;\n \n       var uncurriedAddFour = R.uncurryN(4, addFour);\n       uncurriedAddFour(1, 2, 3, 4); //=> 10\n "
  },
  "unfold": {
    "prefix": "Runfold",
    "body": [
      "R.unfold($Function, $[any])"
    ],
    "description": "\n  Builds a list from a seed value. Accepts an iterator function, which returns\n  either false to stop iteration or an array of length 2 containing the value\n  to add to the resulting list and the seed to be used in the next call to the\n  iterator function.\n \n  The iterator function receives one argument: (seed).\n \n  @func\n  @memberOf R\n  @since v0.10.0\n  @category List\n  @sig (a -> [b]) ->  -> [b]\n  @param {Function} fn The iterator function. receives one argument, `seed`, and returns\n         either false to quit iteration or an array of length two to proceed. The element\n         at index 0 of this array will be added to the resulting array, and the element\n         at index 1 will be passed to the next call to `fn`.\n  @param {} seed The seed value.\n  @return {Array} The final list.\n  @example\n \n       var f = n => n > 50 ? false : [-n, n + 10];\n       R.unfold(f, 10); //=> [-10, -20, -30, -40, -50]\n  @symb R.unfold(f, x) = [f(x)[0], f(f(x)[1])[0], f(f(f(x)[1])[1])[0], ...]\n "
  },
  "union": {
    "prefix": "Runion",
    "body": [
      "R.union($Array, $Array)"
    ],
    "description": "\n  Combines two lists into a set (i.e. no duplicates) composed of the elements\n  of each list.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig [] -> [] -> []\n  @param {Array} as The first list.\n  @param {Array} bs The second list.\n  @return {Array} The first and second lists concatenated, with\n          duplicates removed.\n  @example\n \n       R.union([1, 2, 3], [2, 3, 4]); //=> [1, 2, 3, 4]\n "
  },
  "unionWith": {
    "prefix": "RunionWith",
    "body": [
      "R.unionWith($Function, $Array, $Array)"
    ],
    "description": "\n  Combines two lists into a set (i.e. no duplicates) composed of the elements\n  of each list. Duplication is determined according to the value returned by\n  applying the supplied predicate to two list elements.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Relation\n  @sig ((a, a) -> Boolean) -> [] -> [] -> []\n  @param {Function} pred A predicate used to test whether two items are equal.\n  @param {Array} list1 The first list.\n  @param {Array} list2 The second list.\n  @return {Array} The first and second lists concatenated, with\n          duplicates removed.\n  @see R.union\n  @example\n \n       var l1 = [{a: 1}, {a: 2}];\n       var l2 = [{a: 1}, {a: 4}];\n       R.unionWith(R.eqBy(R.prop('a')), l1, l2); //=> [{a: 1}, {a: 2}, {a: 4}]\n "
  },
  "uniq": {
    "prefix": "Runiq",
    "body": [
      "R.uniq($Array)"
    ],
    "description": "\n  Returns a new list containing only one copy of each element in the original\n  list. [`R.equals`](#equals) is used to determine equality.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [a]\n  @param {Array} list The array to consider.\n  @return {Array} The list of unique items.\n  @example\n \n       R.uniq([1, 1, 2, 1]); //=> [1, 2]\n       R.uniq([1, '1']);     //=> [1, '1']\n       R.uniq([[42], [42]]); //=> [[42]]\n "
  },
  "uniqBy": {
    "prefix": "RuniqBy",
    "body": [
      "R.uniqBy($Function, $Array)"
    ],
    "description": "\n  Returns a new list containing only one copy of each element in the original\n  list, based upon the value returned by applying the supplied function to\n  each list element. Prefers the first item if the supplied function produces\n  the same value on two items. [`R.equals`](#equals) is used for comparison.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category List\n  @sig (a -> b) -> [a] -> [a]\n  @param {Function} fn A function used to produce a value to use during comparisons.\n  @param {Array} list The array to consider.\n  @return {Array} The list of unique items.\n  @example\n \n       R.uniqBy(Math.abs, [-1, -5, 2, 10, 1, 2]); //=> [-1, -5, 2, 10]\n "
  },
  "uniqWith": {
    "prefix": "RuniqWith",
    "body": [
      "R.uniqWith($Function, $Array)"
    ],
    "description": "\n  Returns a new list containing only one copy of each element in the original\n  list, based upon the value returned by applying the supplied predicate to\n  two list elements. Prefers the first item if two items compare equal based\n  on the predicate.\n \n  @func\n  @memberOf R\n  @since v0.2.0\n  @category List\n  @sig ((a, a) -> Boolean) -> [a] -> [a]\n  @param {Function} pred A predicate used to test whether two items are equal.\n  @param {Array} list The array to consider.\n  @return {Array} The list of unique items.\n  @example\n \n       var strEq = R.eqBy(String);\n       R.uniqWith(strEq)([1, '1', 2, 1]); //=> [1, 2]\n       R.uniqWith(strEq)([{}, {}]);       //=> [{}]\n       R.uniqWith(strEq)([1, '1', 1]);    //=> [1]\n       R.uniqWith(strEq)(['1', 1, 1]);    //=> ['1']\n "
  },
  "unless": {
    "prefix": "Runless",
    "body": [
      "R.unless($Function, $Function, $[any])"
    ],
    "description": "\n  Tests the final argument by passing it to the given predicate function. If\n  the predicate is not satisfied, the function will return the result of\n  calling the `whenFalseFn` function with the same argument. If the predicate\n  is satisfied, the argument is returned as is.\n \n  @func\n  @memberOf R\n  @since v0.18.0\n  @category Logic\n  @sig (a -> Boolean) -> (a -> a) -> a -> a\n  @param {Function} pred        A predicate function\n  @param {Function} whenFalseFn A function to invoke when the `pred` evaluates\n                                to a falsy value.\n  @param {}        x           An object to test with the `pred` function and\n                                pass to `whenFalseFn` if necessary.\n  @return {} Either `x` or the result of applying `x` to `whenFalseFn`.\n  @see R.ifElse, R.when\n  @example\n \n       let safeInc = R.unless(R.isNil, R.inc);\n       safeInc(null); //=> null\n       safeInc(1); //=> 2\n "
  },
  "unnest": {
    "prefix": "Runnest",
    "body": [
      "R.unnest($[any])"
    ],
    "description": "\n  Shorthand for `R.chain(R.identity)`, which removes one level of nesting from\n  any [Chain](https://github.com/fantasyland/fantasy-land#chain).\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category List\n  @sig Chain c => c (c a) -> c a\n  @param {} list\n  @return {}\n  @see R.flatten, R.chain\n  @example\n \n       R.unnest([1, [2], [[3]]]); //=> [1, 2, [3]]\n       R.unnest([[1, 2], [3, 4], [5, 6]]); //=> [1, 2, 3, 4, 5, 6]\n "
  },
  "until": {
    "prefix": "Runtil",
    "body": [
      "R.until($Function, $Function, $[any])"
    ],
    "description": "\n  Takes a predicate, a transformation function, and an initial value,\n  and returns a value of the same type as the initial value.\n  It does so by applying the transformation until the predicate is satisfied,\n  at which point it returns the satisfactory value.\n \n  @func\n  @memberOf R\n  @since v0.20.0\n  @category Logic\n  @sig (a -> Boolean) -> (a -> a) -> a -> a\n  @param {Function} pred A predicate function\n  @param {Function} fn The iterator function\n  @param {} init Initial value\n  @return {} Final value that satisfies predicate\n  @example\n \n       R.until(R.gt(R.__, 100), R.multiply(2))(1) // => 128\n "
  },
  "update": {
    "prefix": "Rupdate",
    "body": [
      "R.update($Number, $[any], $Array|Arguments)"
    ],
    "description": "\n  Returns a new copy of the array with the element at the provided index\n  replaced with the given value.\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category List\n  @sig Number -> a -> [a] -> [a]\n  @param {Number} idx The index to update.\n  @param {} x The value to exist at the given index of the returned array.\n  @param {Array|Arguments} list The source array-like object to be updated.\n  @return {Array} A copy of `list` with the value at index `idx` replaced with `x`.\n  @see R.adjust\n  @example\n \n       R.update(1, 11, [0, 1, 2]);     //=> [0, 11, 2]\n       R.update(1)(11)([0, 1, 2]);     //=> [0, 11, 2]\n  @symb R.update(-1, a, [b, c]) = [b, a]\n  @symb R.update(0, a, [b, c]) = [a, c]\n  @symb R.update(1, a, [b, c]) = [b, a]\n "
  },
  "useWith": {
    "prefix": "RuseWith",
    "body": [
      "R.useWith($Function, $Array)"
    ],
    "description": "\n  Accepts a function `fn` and a list of transformer functions and returns a\n  new curried function. When the new function is invoked, it calls the\n  function `fn` with parameters consisting of the result of calling each\n  supplied handler on successive arguments to the new function.\n \n  If more arguments are passed to the returned function than transformer\n  functions, those arguments are passed directly to `fn` as additional\n  parameters. If you expect additional arguments that don't need to be\n  transformed, although you can ignore them, it's best to pass an identity\n  function so that the new function reports the correct arity.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Function\n  @sig ((x1, x2, ...) -> z) -> [(a -> x1), (b -> x2), ...] -> (a -> b -> ... -> z)\n  @param {Function} fn The function to wrap.\n  @param {Array} transformers A list of transformer functions\n  @return {Function} The wrapped function.\n  @see R.converge\n  @example\n \n       R.useWith(Math.pow, [R.identity, R.identity])(3, 4); //=> 81\n       R.useWith(Math.pow, [R.identity, R.identity])(3)(4); //=> 81\n       R.useWith(Math.pow, [R.dec, R.inc])(3, 4); //=> 32\n       R.useWith(Math.pow, [R.dec, R.inc])(3)(4); //=> 32\n  @symb R.useWith(f, [g, h])(a, b) = f(g(a), h(b))\n "
  },
  "values": {
    "prefix": "Rvalues",
    "body": [
      "R.values($Object)"
    ],
    "description": "\n  Returns a list of all the enumerable own properties of the supplied object.\n  Note that the order of the output array is not guaranteed across different\n  JS platforms.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category Object\n  @sig {k: v} -> [v]\n  @param {Object} obj The object to extract values from\n  @return {Array} An array of the values of the object's own properties.\n  @see R.valuesIn, R.keys\n  @example\n \n       R.values({a: 1, b: 2, c: 3}); //=> [1, 2, 3]\n "
  },
  "valuesIn": {
    "prefix": "RvaluesIn",
    "body": [
      "R.valuesIn($Object)"
    ],
    "description": "\n  Returns a list of all the properties, including prototype properties, of the\n  supplied object.\n  Note that the order of the output array is not guaranteed to be consistent\n  across different JS platforms.\n \n  @func\n  @memberOf R\n  @since v0.2.0\n  @category Object\n  @sig {k: v} -> [v]\n  @param {Object} obj The object to extract values from\n  @return {Array} An array of the values of the object's own and prototype properties.\n  @see R.values, R.keysIn\n  @example\n \n       var F = function() { this.x = 'X'; };\n       F.prototype.y = 'Y';\n       var f = new F();\n       R.valuesIn(f); //=> ['X', 'Y']\n "
  },
  "view": {
    "prefix": "Rview",
    "body": [
      "R.view($Lens, $[any])"
    ],
    "description": "\n  Returns a \"view\" of the given data structure, determined by the given lens.\n  The lens's focus determines which portion of the data structure is visible.\n \n  @func\n  @memberOf R\n  @since v0.16.0\n  @category Object\n  @typedefn Lens s a = Functor f => (a -> f a) -> s -> f s\n  @sig Lens s a -> s -> a\n  @param {Lens} lens\n  @param {} x\n  @return {}\n  @see R.prop, R.lensIndex, R.lensProp\n  @example\n \n       var xLens = R.lensProp('x');\n \n       R.view(xLens, {x: 1, y: 2});  //=> 1\n       R.view(xLens, {x: 4, y: 2});  //=> 4\n "
  },
  "when": {
    "prefix": "Rwhen",
    "body": [
      "R.when($Function, $Function, $[any])"
    ],
    "description": "\n  Tests the final argument by passing it to the given predicate function. If\n  the predicate is satisfied, the function will return the result of calling\n  the `whenTrueFn` function with the same argument. If the predicate is not\n  satisfied, the argument is returned as is.\n \n  @func\n  @memberOf R\n  @since v0.18.0\n  @category Logic\n  @sig (a -> Boolean) -> (a -> a) -> a -> a\n  @param {Function} pred       A predicate function\n  @param {Function} whenTrueFn A function to invoke when the `condition`\n                               evaluates to a truthy value.\n  @param {}        x          An object to test with the `pred` function and\n                               pass to `whenTrueFn` if necessary.\n  @return {} Either `x` or the result of applying `x` to `whenTrueFn`.\n  @see R.ifElse, R.unless\n  @example\n \n       // truncate :: String -> String\n       var truncate = R.when(\n         R.propSatisfies(R.gt(R.__, 10), 'length'),\n         R.pipe(R.take(10), R.append('…'), R.join(''))\n       );\n       truncate('12345');         //=> '12345'\n       truncate('0123456789ABC'); //=> '0123456789…'\n "
  },
  "where": {
    "prefix": "Rwhere",
    "body": [
      "R.where($Object, $Object)"
    ],
    "description": "\n  Takes a spec object and a test object; returns true if the test satisfies\n  the spec. Each of the spec's own properties must be a predicate function.\n  Each predicate is applied to the value of the corresponding property of the\n  test object. `where` returns true if all the predicates return true, false\n  otherwise.\n \n  `where` is well suited to declaratively expressing constraints for other\n  functions such as [`filter`](#filter) and [`find`](#find).\n \n  @func\n  @memberOf R\n  @since v0.1.1\n  @category Object\n  @sig {String: ( -> Boolean)} -> {String: } -> Boolean\n  @param {Object} spec\n  @param {Object} testObj\n  @return {Boolean}\n  @see R.propSatisfies, R.whereEq\n  @example\n \n       // pred :: Object -> Boolean\n       var pred = R.where({\n         a: R.equals('foo'),\n         b: R.complement(R.equals('bar')),\n         x: R.gt(R.__, 10),\n         y: R.lt(R.__, 20)\n       });\n \n       pred({a: 'foo', b: 'xxx', x: 11, y: 19}); //=> true\n       pred({a: 'xxx', b: 'xxx', x: 11, y: 19}); //=> false\n       pred({a: 'foo', b: 'bar', x: 11, y: 19}); //=> false\n       pred({a: 'foo', b: 'xxx', x: 10, y: 19}); //=> false\n       pred({a: 'foo', b: 'xxx', x: 11, y: 20}); //=> false\n "
  },
  "whereEq": {
    "prefix": "RwhereEq",
    "body": [
      "R.whereEq($Object, $Object)"
    ],
    "description": "\n  Takes a spec object and a test object; returns true if the test satisfies\n  the spec, false otherwise. An object satisfies the spec if, for each of the\n  spec's own properties, accessing that property of the object gives the same\n  value (in [`R.equals`](#equals) terms) as accessing that property of the\n  spec.\n \n  `whereEq` is a specialization of [`where`](#where).\n \n  @func\n  @memberOf R\n  @since v0.14.0\n  @category Object\n  @sig {String: } -> {String: } -> Boolean\n  @param {Object} spec\n  @param {Object} testObj\n  @return {Boolean}\n  @see R.propEq, R.where\n  @example\n \n       // pred :: Object -> Boolean\n       var pred = R.whereEq({a: 1, b: 2});\n \n       pred({a: 1});              //=> false\n       pred({a: 1, b: 2});        //=> true\n       pred({a: 1, b: 2, c: 3});  //=> true\n       pred({a: 1, b: 1});        //=> false\n "
  },
  "without": {
    "prefix": "Rwithout",
    "body": [
      "R.without($Array, $Array)"
    ],
    "description": "\n  Returns a new list without values in the first argument.\n  [`R.equals`](#equals) is used to determine equality.\n \n  Acts as a transducer if a transformer is given in list position.\n \n  @func\n  @memberOf R\n  @since v0.19.0\n  @category List\n  @sig [a] -> [a] -> [a]\n  @param {Array} list1 The values to be removed from `list2`.\n  @param {Array} list2 The array to remove values from.\n  @return {Array} The new array without values in `list1`.\n  @see R.transduce, R.difference\n  @example\n \n       R.without([1, 2], [1, 2, 1, 3, 4]); //=> [3, 4]\n "
  },
  "xprod": {
    "prefix": "Rxprod",
    "body": [
      "R.xprod($Array, $Array)"
    ],
    "description": "\n  Creates a new list out of the two supplied by creating each possible pair\n  from the lists.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [b] -> [[a,b]]\n  @param {Array} as The first list.\n  @param {Array} bs The second list.\n  @return {Array} The list made by combining each possible pair from\n          `as` and `bs` into pairs (`[a, b]`).\n  @example\n \n       R.xprod([1, 2], ['a', 'b']); //=> [[1, 'a'], [1, 'b'], [2, 'a'], [2, 'b']]\n  @symb R.xprod([a, b], [c, d]) = [[a, c], [a, d], [b, c], [b, d]]\n "
  },
  "zip": {
    "prefix": "Rzip",
    "body": [
      "R.zip($Array, $Array)"
    ],
    "description": "\n  Creates a new list out of the two supplied by pairing up equally-positioned\n  items from both lists. The returned list is truncated to the length of the\n  shorter of the two input lists.\n  Note: `zip` is equivalent to `zipWith(function(a, b) { return [a, b] })`.\n \n  @func\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig [a] -> [b] -> [[a,b]]\n  @param {Array} list1 The first array to consider.\n  @param {Array} list2 The second array to consider.\n  @return {Array} The list made by pairing up same-indexed elements of `list1` and `list2`.\n  @example\n \n       R.zip([1, 2, 3], ['a', 'b', 'c']); //=> [[1, 'a'], [2, 'b'], [3, 'c']]\n  @symb R.zip([a, b, c], [d, e, f]) = [[a, d], [b, e], [c, f]]\n "
  },
  "zipObj": {
    "prefix": "RzipObj",
    "body": [
      "R.zipObj($Array, $Array)"
    ],
    "description": "\n  Creates a new object out of a list of keys and a list of values.\n  Key/value pairing is truncated to the length of the shorter of the two lists.\n  Note: `zipObj` is equivalent to `pipe(zip, fromPairs)`.\n \n  @func\n  @memberOf R\n  @since v0.3.0\n  @category List\n  @sig [String] -> [] -> {String: }\n  @param {Array} keys The array that will be properties on the output object.\n  @param {Array} values The list of values on the output object.\n  @return {Object} The object made by pairing up same-indexed elements of `keys` and `values`.\n  @example\n \n       R.zipObj(['a', 'b', 'c'], [1, 2, 3]); //=> {a: 1, b: 2, c: 3}\n "
  },
  "zipWith": {
    "prefix": "RzipWith",
    "body": [
      "R.zipWith($Function, $Array, $Array)"
    ],
    "description": "\n  Creates a new list out of the two supplied by applying the function to each\n  equally-positioned pair in the lists. The returned list is truncated to the\n  length of the shorter of the two input lists.\n \n  @function\n  @memberOf R\n  @since v0.1.0\n  @category List\n  @sig ((a, b) -> c) -> [a] -> [b] -> [c]\n  @param {Function} fn The function used to combine the two elements into one value.\n  @param {Array} list1 The first array to consider.\n  @param {Array} list2 The second array to consider.\n  @return {Array} The list made by combining same-indexed elements of `list1` and `list2`\n          using `fn`.\n  @example\n \n       var f = (x, y) => {\n         // ...\n       };\n       R.zipWith(f, [1, 2, 3], ['a', 'b', 'c']);\n       //=> [f(1, 'a'), f(2, 'b'), f(3, 'c')]\n  @symb R.zipWith(fn, [a, b, c], [d, e, f]) = [fn(a, d), fn(b, e), fn(c, f)]\n "
  },
  "__": {
    "prefix": "R__",
    "body": [
      "R.__()"
    ],
    "description": "\n  A special placeholder value used to specify \"gaps\" within curried functions,\n  allowing partial application of any combination of arguments, regardless of\n  their positions.\n \n  If `g` is a curried ternary function and `_` is `R.__`, the following are\n  equivalent:\n \n    - `g(1, 2, 3)`\n    - `g(_, 2, 3)(1)`\n    - `g(_, _, 3)(1)(2)`\n    - `g(_, _, 3)(1, 2)`\n    - `g(_, 2, _)(1, 3)`\n    - `g(_, 2)(1)(3)`\n    - `g(_, 2)(1, 3)`\n    - `g(_, 2)(_, 3)(1)`\n \n  @constant\n  @memberOf R\n  @since v0.6.0\n  @category Function\n  @example\n \n       var greet = R.replace('{name}', R.__, 'Hello, {name}!');\n       greet('Alice'); //=> 'Hello, Alice!'\n "
  }
}